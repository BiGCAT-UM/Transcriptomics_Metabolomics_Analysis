saveSession(cys.file)
#we will continue with the smae session used for ppi-pathway networks
#to check cytoscape is connected
cytoscapePing()
#to get network name rectum
networkSuid = getNetworkSuid("PPI_Pathway_Network_rectum")
setCurrentNetwork(network=networkSuid)
#create cluster command
clustermaker <- paste("cluster mcl createGroups=TRUE showUI=TRUE network=SUID:",networkSuid, sep="")
#run the command in cytoscape
res <- commandsGET(clustermaker)
#total number of clusters for rectum
num_rectum <- as.numeric(gsub("Clusters: ", "", res[1]))
#export image
png.file <- file.path(getwd(), "output/PPI_Pathway_Network_rectum--clustered.png")
exportImage(png.file,'PNG', zoom = 500)
networkSuid = getNetworkSuid("PPI_Pathway_Network_ileum")
setCurrentNetwork(network=networkSuid)
#create cluster command
clustermaker <- paste("cluster mcl createGroups=TRUE showUI=TRUE network=SUID:",networkSuid, sep="")
#run the command in cytoscape
res <- commandsGET(clustermaker)
#total number of clusters for rectum
num_ileum <- as.numeric(gsub("Clusters: ", "", res[1]))
#export image
png.file <- file.path(getwd(), "output/PPI_Pathway_Network_ileum--clustered.png")
exportImage(png.file,'PNG', zoom = 500)
cys.file <- file.path(getwd(), "output/PPI_Pathway_Network_clustered_rectum_ileum.cys")
saveSession(cys.file)
png.file <- file.path(getwd(), "output/PPI_Pathway_Network_rectum--clustered.png")
exportImage(png.file,'PNG', zoom = 500)
browseVignettes("RCy3")
Sys.getenv("PATH")
path <- Sys.getenv("PATH")
path <- c("C:\\RBuildTools\\4.0\\mingw32\\bin", path)
path <- paste(path,collapse=";")
Sys.setenv(PATH=path)
path <- Sys.getenv("PATH")
path
devtools::install_github("xia-lab/MetaboAnalystR", build = TRUE, build_opts = c("--no-resave-data", "--no-manual"))
# Step 2: Install MetaboAnalystR with documentation
devtools::install_github("xia-lab/MetaboAnalystR", build = TRUE, build_vignettes = FALSE, build_manual = T)
# Step 2: Install MetaboAnalystR with documentation
devtools::install_github("xia-lab/MetaboAnalystR", build = TRUE, build_vignettes = FALSE, build_manual = T)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
# Step 2: Install MetaboAnalystR with documentation
devtools::install_github("xia-lab/MetaboAnalystR", build = TRUE, build_vignettes = FALSE, build_manual = T)
BiocManager::install("rlang")
library(rlang)
rlang
version.rlang
packageVersion("rlang")
library(rstudioapi)
library(RCy3)#connect cytoscape via R
library(rWikiPathways)#to get pathways from WikiPathways
library(RColorBrewer)#to manage colors with R
setwd("C:/Users/dedePC/Desktop/BBS3004_21-22/Workshop_Cytoscape/automation")
#make sure to launch cytoscape, if you get get CyREST error you need to relaunch cytoscape
cytoscapePing()
pathway1.id <- "WP5095"
pathway2.id <- "WP3624"
pathway3.id <- "WP2806"
RCy3::commandsRun(paste0('wikipathways import-as-network id=',pathway1.id ))
RCy3::commandsRun(paste0('wikipathways import-as-network id=',pathway2.id ))
RCy3::commandsRun(paste0('wikipathways import-as-network id=',pathway3.id ))
RCy3::mergeNetworks(c("Overview of proinflammatory and profibrotic mediators - Homo sapiens","Lung fibrosis - Homo sapiens"), "Merged Network-1")
RCy3::mergeNetworks(c("Merged Network","Complement system - Homo sapiens"), "Merged Network-2")
RCy3::mergeNetworks(c("Merged Network-1","Complement system - Homo sapiens"), "Merged Network-2")
#set merged network as current neetwork, you should give the name or suid of the network that you want set as current
setCurrentNetwork(network="Merged Network-2")
#read data table from the file
dataset <- read.delim("data/table_CD_Rectum_vs_nonIBD_Rectum_no_quotes.tab")
# load data in to the merged network
loadTableData(table = "node", data = dataset, data.key.column = "GeneSymbol", table.key.column = "name")
RCy3::copyVisualStyle("default","myStyle")#Create a new visual style (myStyle) by copying a specified style (default)
RCy3::setNodeLabelMapping("label", style.name="myStyle")
RCy3::lockNodeDimensions(TRUE, style.name="myStyle")#Set a boolean value to have node width and height fixed to a single size
RCy3::data.values<-c(-0.58,0,0.58) #threshold values for up and down regulated genes
#change node colors based on log2FC
data.values<-c(-0.58,0,0.58) #threshold values for up and down regulated genes
node.colors <- c(brewer.pal(length(data.values), "RdBu"))
RCy3::setNodeColorMapping("log2FoldChange", data.values, node.colors, default.color = "#D3D3D3", style.name = "myStyle")
RCy3::setNodeBorderWidthMapping('pvalue', c(1.7403E-20,0.05), c(5,1),style.name = "myStyle")
RCy3::setNodeBorderColorMapping('pvalue', c(1.7403E-20,0.05), c('#FF0000','#FF0000'),style.name = "myStyle")
#filter out nodes in merged network
createColumnFilter('myFilter', 'log2FC', -0.58, "LESS_THAN")
#filter out nodes in merged network
createColumnFilter('myFilter', 'log2FoldChange', -0.58, "LESS_THAN")
clearSelection()
#filter out nodes in merged network
#apply a column filter
createColumnFilter('myFilter', 'log2FoldChange', -0.58, "LESS_THAN")
#filter out nodes in merged network
#apply a column filter
obj <- createColumnFilter('myFilter', 'log2FoldChange', -0.58, "LESS_THAN")
obj
createNetwork(nodes = obj$nodes, edges = obj$edges, network.name = "filtered_network")
install.packages("remotes")
remotes::install_github("cytoscape/r2cytoscape")
install.packages("remotes")
createSubnetwork(nodes = obj$nodes,edges = obj$edges, network = "filtered_network")
createSubnetwork(nodes = obj$nodes,edges = obj$edges)
createSubnetwork(nodes = obj$nodes,edges = obj$edges, network = "Merged Network-2")
createNetwork(nodes = obj$nodes, edges = obj$edges, network.name = "filtered_network")
library(r2cytoscape)
createNetwork(nodes = obj$nodes, edges = obj$edges, network.name = "filtered_network")
createNetwork(nodes = obj, network.name = "filtered_network")
createSubnetwork()
#you may clear selection
clearSelection()
# set your working environment to your source file location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
rstudioapi::getActiveDocumentContext()$path
dirname(rstudioapi::getActiveDocumentContext()$path)
rstudioapi::getActiveDocumentContext()$path
rstudioapi::getActiveDocumentContext()
knitr::opts_chunk$set(echo = TRUE)
library(rstudioapi)
getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
sessionInfo()
packageVersion("rstudioapi")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#close all opened session before starting
closeSession(FALSE)# clears all session data without saving
help(package=RCy3)
#make sure to launch cytoscape, if you get CyREST error you need to relaunch cytoscape
cytoscapePing()
commandsHelp()
pathway1.id <- "WP5095"
pathway2.id <- "WP3624"
pathway3.id <- "WP2806"
RCy3::commandsRun(paste0('wikipathways import-as-network id=',pathway1.id ))
RCy3::commandsRun(paste0('wikipathways import-as-network id=',pathway2.id ))
RCy3::commandsRun(paste0('wikipathways import-as-network id=',pathway3.id ))
###### STEP-2 Merge imported pathways #######
#we will merge imported networks
RCy3::mergeNetworks(c("Overview of proinflammatory and profibrotic mediators - Homo sapiens","Lung fibrosis - Homo sapiens"), "Merged Network-1")
RCy3::mergeNetworks(c("Merged Network-1","Complement system - Homo sapiens"), "Merged Network-2")
#set the merged network as the current network, you should give the name or suid of the network
#that you want set as current
setCurrentNetwork(network="Merged Network-2")
####### STEP-3 Load data file #########
#read data table from the file
dataset <- read.delim("data/table_CD_Rectum_vs_nonIBD_Rectum_no_quotes.tab")
# load data in to the merged network
loadTableData(table = "node", data = dataset, data.key.column = "GeneSymbol", table.key.column = "name")
View(dataset)
View(dataset)
####### STEP-3 Load data file #########
#read data table from the file
dataset <- read.delim("data/table_CD_Rectum_vs_nonIBD_Rectum.tab")
# load data in to the merged network
loadTableData(table = "node", data = dataset, data.key.column = "GeneSymbol", table.key.column = "name")
# load data in to the merged network
loadTableData(table = "node", data = dataset, data.key.column = "GeneSymbol", table.key.column = "name")
View(dataset)
####### STEP-3 Load data file #########
#read data table from the file
dataset <- read.delim("data/table_CD_Rectum_vs_nonIBD_Rectum_no_quotes.tab")
# load data in to the merged network
loadTableData(table = "node", data = dataset, data.key.column = "GeneSymbol", table.key.column = "name")
# load data in to the merged network
loadTableData(table = "node", data = dataset, data.key.column = "GeneSymbol", table.key.column = "name")
# load data in to the merged network
loadTableData(table = "node", data = dataset, data.key.column = "GeneSymbol", table.key.column = "name", network = "Merged Network-2")
dataset <- read.csv ("data/table_CD_Rectum_vs_nonIBD_Rectum.tab", sep = "\t" )
View(dataset)
dataset <- read.csv ("data/table_CD_Rectum_vs_nonIBD_Rectum.tab", sep = "\t" )
View(dataset)
# load data in to the merged network
loadTableData(table = "node", data = dataset, data.key.column = "GeneSymbol", table.key.column = "name", network = "Merged Network-2")
dataset <- read.csv ("data/table_CD_Rectum_vs_nonIBD_Rectum.tab", sep = "\t" ,row.names = FALSE)
####### STEP-3 Load data file #########
#read data table from the file
dataset <- read.delim("data/table_CD_Rectum_vs_nonIBD_Rectum_no_quotes.tab")
View(dataset)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(scales)
library(coin)
library(nlme)
library(compositions)
library(FSA)
library(cowplot)
library(phyloseq)
library(microbiome)
library(DESeq2)
library(ggvenn)
setwd("C:/Users/dedePC/Desktop/Workshop_Microbial_Community/source_codes/day3_session2")
source("ancom_v2..R")
source("ancom_v2.1.R")
load("phyloseq.Rdata")
physeq
View(physeq)
# check if chloroplasts are present in the dataset
tax_table(subset_taxa(physeq, Order == "Chloroplast")) # 2 chloroplast ASVs present
# remove chloroplasts
physeq<-physeq %>% subset_taxa(Order != "Chloroplast")
# check if mitochondria are present in the dataset
tax_table(subset_taxa(physeq, Family == "Mitochondria")) # 5 mitochondria ASVs present
# remove mitochondria
physeq<-physeq %>% subset_taxa(Family != "Mitochondria")
# show phyloseq object again - we can see that we removed 7 ASVs in total
physeq
phyroot <- physeq %>% subset_samples(Tissue == "Soil")
phyroot
# filter
phyroot_filtered = filter_taxa(phyroot, function(x) sum(x > 15) > (0.25*length(x)), TRUE)
# check how many taxa were removed
ntaxa(phyroot) # before filtering
ntaxa(phyroot_filtered) # after filtering
# we are choosing the minimum read count for rarefaction
raremin<-min(phyloseq::sample_sums(phyroot_filtered))
# rarefy the data to raremin
phyroot_filtered_rar<-rarefy_even_depth(physeq = phyroot_filtered, sample.size = raremin, trimOTUs = T, rngseed = 65987, replace = F)
# check the loss of taxa due to rarefaction
ntaxa(phyroot_filtered)
ntaxa(phyroot_filtered_rar)
# get most abundant ASV across samples
asv<-phyloseq::taxa_sums(phyroot_filtered_rar) %>% sort(decreasing = T) %>% head(n =1) %>% names
asv # we chose ASV4
# transform counts into relative abundances so it is of easier understanding
phyroot_filtered_rar <- transform_sample_counts(phyroot_filtered_rar, function(x) x / sum(x) )
phyloseq::sample_sums(phyroot_filtered_rar) # now sample sums are all 1
#  we save the relative abundance of ASV4 in each sample into a dataframe
dfASV4 <- data.frame(
Abundance = as.vector(otu_table(phyroot_filtered_rar)[asv,]),
samples = as.data.frame(otu_table(phyroot_filtered_rar))[asv,] %>% names
)
# now add the metadata
# First double check that the samples are in the same order so you can merge the df
all(dfASV4$samples == rownames(meta(phyroot_filtered_rar)))
# then bind the two dataframes together to combine ASV4 abundances with metadata
dfASV4<-cbind.data.frame(dfASV4, meta(phyroot_filtered_rar))
# we need to transform the variables to factors
dfASV4<-dfASV4 %>% mutate_if(is.character,as.factor)
# perform wilcoxon test
w<-coin::wilcox_test(Abundance ~ Country, data=dfASV4, conf.int = TRUE)
# we can extract the p-value, which will tell us if the shift in abundance is significant
coin::pvalue(w)
# we can extract an approximation of the median differences in abundance between the 2 groups using the confint() function
confint(w)[[2]]
# ... and the corresponding confidence intervals
as.data.frame(confint(w)[[1]])
ASV4_box
w
# let's explore the distribution of the taxa abundances across samples in a box plot.
ASV4_box<-ggplot(dfASV4, aes(Country, Abundance)) +
geom_boxplot() +
geom_jitter(width = 0.2) +
facet_wrap(~Tissue)
ASV4_box
knitr::opts_chunk$set(echo = TRUE)
# create a df with all taxa and all variables
asv<-as.data.frame(t(otu_table(phyroot_filtered_rar))) # extract asv abundances
all(rownames(asv) == rownames(meta(phyroot_filtered_rar))) # check that order is identical
asv<-cbind.data.frame(asv, meta(phyroot_filtered_rar)) # combine asv and metadata
asv<-asv %>% mutate_if(is.character,as.factor) # make sure variables are factors
View(asv)
# save all taxa names
tax<-taxa_names(phyroot_filtered_rar)
# empty dataframe, setting up all required columns
df_w<-data.frame(pvalue= vector(length = length(tax)),
padjust = vector(length = length(tax)),
CI1 = vector(length = length(tax)),
CI2 = vector(length = length(tax)),
estimate = vector(length = length(tax)))
rownames(df_w)<-tax # set rownames to taxa
# check if libraries are already installed > otherwise install it
if(!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager",repos = "http://cran.us.r-project.org")
if(!"rstudioapi" %in% installed.packages()) BiocManager::install("rstudioapi")
#load libraries
library(rstudioapi)
# set your working environment to the location where your current source file is saved into.
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
#you can check where your current working directory is
#getwd()
getwd()
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# check if libraries are already installed > otherwise install it
if(!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager",repos = "http://cran.us.r-project.org")
if(!"rstudioapi" %in% installed.packages()) BiocManager::install("rstudioapi")
#load libraries
library(rstudioapi)
# set your working environment to the location where your current source file is saved into.
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
#we first read metadata
data <- read.csv("data/table_CD_Ileum_vs_nonIBD_Ileum.tab")
View(data)
#we first read metadata
data <- read.csv("data/table_CD_Ileum_vs_nonIBD_Ileum.tab", sep= "\t")
View(data)
# Install the package if you have not installed by running this command:
BiocManager::install("EnsDb.Hsapiens.v79")
library(EnsDb.Hsapiens.v79)
# 2. Convert from gene.symbol to ensembl.gene
geneIDs2 <- ensembldb::select(EnsDb.Hsapiens.v79, keys= data$X, keytype = "SYMBOL", columns = c("SYMBOL","GENEID"))
View(geneIDs2)
listMarts()
biomaRt
library(biomaRt)
listMarts()
ensembl  <-useMart("ensembl")
datasets <-listDatasets(ensembl)
ensembl = useDataset("hsapiens_gene_ensembl",mart=ensembl)
ensemblID <- getBM(attributes=c('external_gene_name','ensembl_gene_id'),
filters = 'external_gene_name', values   = data$X, mart = ensembl)#add extra filter value
View(ensemblID)
View(geneIDs2)
View(geneIDs2)
hs <- org.Hs.eg.db
library(org.Hs.eg.db)
hs <- org.Hs.eg.db
entrezID <- AnnotationDbi::select(hs,
keys = data$X,
columns = c("ENSEMBL", "SYMBOL"),
keytype = "SYMBOL")
ensemblID <- AnnotationDbi::select(hs,
keys = data$X,
columns = c("ENSEMBL", "SYMBOL"),
keytype = "SYMBOL")
rm(entrezID)
View(ensemblID)
#filter out double gene symbols
geneIDs2<- geneIDs2 %>% distinct(geneIDs2$SYMBOL, .keep_all = TRUE)
library(dplyr)
#filter out double gene symbols
geneIDs2<- geneIDs2 %>% distinct(geneIDs2$SYMBOL, .keep_all = TRUE)
ensemblID<- ensemblID %>% distinct(ensemblID$SYMBOL, .keep_all = TRUE)
View(ensemblID)
ensemblID %>% filter(!is.na(ENSEMBL))
View(ensemblID)
dd <- ensemblID %>% drop_na(ENSEMBL)
library(tidyverse)
dd <- ensemblID %>% drop_na(ENSEMBL)
View(dd)
dd2 <- geneIDs2 %>% drop_na(GENEID)
library(metaboliteIDmapping)
if(!"metaboliteIDmapping" %in% installed.packages()) BiocManager::install("metaboliteIDmapping")
library(metaboliteIDmapping)
metabolitesMapping
head(metabolitesMapping)
library( AnnotationHub)
ah <- AnnotationHub()
datasets <- query( ah, "metaboliteIDmapping")
View(datasets)
datasets[1]
data <- ah[["AH91792"]]
View(data)
data <- read.csv("data/mbxDataCD_nonIBD", sep= "\t")
mbxData <- read.csv("data/mbxDataCD_nonIBD.csv", sep= "\t")
View(mbxData)
mbxData <- read.csv("data/mbxDataCD_nonIBD.csv")
View(mbxData)
View(ah)
View(data)
View(geneIDs2)
View(datasets)
View(data)
View(datasets)
View(data)
View(data)
#we first read metadata
data <- read.csv("data/table_CD_Ileum_vs_nonIBD_Ileum.tab", sep= "\t")
rm.all()
#we first read metadata
data <- read.csv("data/table_CD_Ileum_vs_nonIBD_Ileum.tab", sep= "\t")
# 2. Convert from gene.symbol to ensembl.gene
geneIDs2 <- ensembldb::select(EnsDb.Hsapiens.v79, keys= data$X, keytype = "SYMBOL", columns = c("SYMBOL","GENEID"))
library(org.Hs.eg.db)
hs <- org.Hs.eg.db
ensemblID <- AnnotationDbi::select(hs,
keys = data$X,
columns = c("ENSEMBL", "SYMBOL"),
keytype = "SYMBOL")
#filter out double gene symbols
geneIDs2<- geneIDs2 %>% distinct(geneIDs2$SYMBOL, .keep_all = TRUE)
#filter out NA values
geneIDs2 <- geneIDs2 %>% drop_na(GENEID)
library(org.Hs.eg.db)
hs <- org.Hs.eg.db
ensemblID <- AnnotationDbi::select(hs,
keys = data$X,
columns = c("ENSEMBL", "SYMBOL"),
keytype = "SYMBOL")
#filter out double gene symbols
ensemblID <- ensemblID %>% distinct (ensemblID$SYMBOL, .keep_all = TRUE)
# add entrezIDs for each gene symbol in the dataset
dataset <- cbind(entrezID$ENTREZID,data)
View(ensemblID)
# add entrezIDs for each gene symbol in the dataset
dataset <- cbind(ensemblID$ENSEMBL,data)
View(dataset)
#filter out genes that has NA value for entrezID
dataset<- dataset %>% tidyr::drop_na(ENTREZ.ID)
#change column name
colnames(dataset)[1] = "ENSEMBL.ID"
#filter out genes that has NA value for entrezID
dataset<- dataset %>% tidyr::drop_na(ENSEMBL.ID)
View(geneIDs2)
# Convert from gene.symbol to ensembl.gene
geneIDs2 <- ensembldb::select(EnsDb.Hsapiens.v79, keys= data$X, keytype = "SYMBOL", columns = c("SYMBOL","GENEID"))
#filter out double gene symbols
geneIDs2<- geneIDs2 %>% distinct(geneIDs2$SYMBOL, .keep_all = TRUE)
View(geneIDs2)
# add entrezIDs for each gene symbol in the dataset
dataset2 <- cbind(geneIDs2$GENEID,data)
# check if libraries are already installed > otherwise install it
if(!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager",repos = "http://cran.us.r-project.org")
if(!"rstudioapi" %in% installed.packages()) BiocManager::install("rstudioapi")
#load libraries
library(rstudioapi)
library(dplyr)
# set your working environment to the location where your current source file is saved into.
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
#we first read metadata
data <- read.csv("data/table_CD_Ileum_vs_nonIBD_Ileum.tab", sep= "\t")
View(data)
library(org.Hs.eg.db)
hs <- org.Hs.eg.db
ensemblID <- AnnotationDbi::select(hs,
keys = data$X,
columns = c("ENSEMBL", "SYMBOL"),
keytype = "SYMBOL")
View(ensemblID)
#filter out double gene symbols
ensemblID <- ensemblID %>% distinct (ensemblID$SYMBOL, .keep_all = TRUE)
# add entrezIDs for each gene symbol in the dataset
dataset <- cbind(ensemblID$ENSEMBL,data)
View(dataset)
#change column name
colnames(dataset)[1] = "ENSEMBL.ID"
#filter out genes that has NA value for entrezID
dataset<- dataset %>% tidyr::drop_na(ENSEMBL.ID)
colnames(dataset)[2] = "SYMBOL"
#####Transform hmdb IDs to CheIDs ################
#read data
mbxData <- read.csv("data/mbxDataCD_nonIBD.csv")
if(!"metaboliteIDmapping" %in% installed.packages()) BiocManager::install("metaboliteIDmapping")
library(metaboliteIDmapping)
metabolitesMapping
library( AnnotationHub)
ah <- AnnotationHub()
datasets <- query( ah, "metaboliteIDmapping")
datasets[1]
View(datasets)
View(dataset)
View(data)
BiocManager::install("BridgeDbR")
library(BridgeDbR)
fileUrl <- "https://ndownloader.figshare.com/files/26001794?accessType=DOWNLOAD"
require(downloader)
download(fileUrl, "data/metabolites.bridge", mode = "wb")
mapper <- loadDatabase('data/metabolites.bridge')
## Obtain the System codes for the databases HMDB (source database of dataset) and ChEBI (intended output database)
code = getOrganismCode("Homo sapiens")
code_mappingFrom <- getSystemCode("HMDB")
code_mappingTo <- getSystemCode("ChEBI")
code_mappingFrom
code_mappingTo
View(data)
View(mbxData)
input <- as.data.frame(mbxData$HMBDB.ID)
#Obtain all mappings from HMDB to ChEBI
MultiMappings = maps(mapper, input, code_mappingTo)
View(input)
input[2]
input
input[2,]
nrow(input)
input <- input[2:nrow(input),]
#Obtain all mappings from HMDB to ChEBI
MultiMappings = maps(mapper, input, code_mappingTo)
input <- as.data.frame(input)
View(input)
#Obtain all mappings from HMDB to ChEBI
MultiMappings = maps(mapper, input, code_mappingTo)
code_mappingTo
View(mapper)
input <- data.frame(input)
#Obtain all mappings from HMDB to ChEBI
MultiMappings = maps(mapper, input, code_mappingTo)
hmdbIDs <- mbxData$HMBDB.ID[2:nrow(mbxData$HMBDB.ID),]
hmdbIDs <- mbxData$HMBDB.ID
hmdbIDs <- hmdbIDs[2:nrow(hmdbIDs),]
hmdbIDs <- as.data.frame(mbxData$HMBDB.ID)
hmdbIDs <- hmdbIDs[2:nrow(hmdbIDs),]
input = data.frame(
source = rep(code_mappingFrom, length(hmdbIDs)),
identifier = hmdbIDs
)
View(input)
#Obtain all mappings from HMDB to ChEBI
MultiMappings = maps(mapper, input, code_mappingTo)
View(MultiMappings)
write.table(MultiMappings, "output/mbxData")
write.table(MultiMappings, "output/mbxData",row.names = FALSE)
write.table(MultiMappings, "output/mbxData",row.names = FALSE, quote = FALSE)
write.table(MultiMappings, "output/mbxData",row.names = FALSE, quote = FALSE, sep="\t")
View(dataset)
write.table(geneData, "output/geneData")
write.table(dataset, "output/geneData")
write.table(dataset, "output/geneData",row.names = FALSE, quote = FALSE, sep="\t")
