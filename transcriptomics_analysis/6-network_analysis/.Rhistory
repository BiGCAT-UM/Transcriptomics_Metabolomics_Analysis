#load data to the imported pathway in cytoscape by key column as XrefId
loadTableData(table = "node", data = data, data.key.column = "XrefId", table.key.column = "XrefId")
#new visual style is created
RCy3::copyVisualStyle("WikiPathways","pathwayStyle")
#set new style as the current style
RCy3::setVisualStyle("pathwayStyle")
#set node dimensions as fixed sizes
RCy3::lockNodeDimensions(TRUE, style.name="pathwayStyle")
#node shape mapping
RCy3::setNodeShapeMapping('Type',c('GeneProduct','Protein', 'Metabolite'),c('ELLIPSE','ELLIPSE','RECTANGLE'),style.name="pathwayStyle")
#get node table from imported pathway in cytoscape
ID.cols <- getTableColumns(table ="node", columns = c("XrefId","Ensembl", "ChEBI"))
#filter out rows which contain NA value for columns Ensembl and ChEBI
ID.cols <- ID.cols[!with(ID.cols, is.na(Ensembl) & is.na(ChEBI)),]
#if a row value in the Ensembl column is NA then replace it with ChEBI
ID.cols$Ensembl <- ifelse(is.na(ID.cols$Ensembl), ID.cols$ChEBI, ID.cols$Ensembl)
#use the only one column contains both Ensembl and ChEBI identifiers
ID.cols <- data.frame(ID.cols[,c(1,2)])
#change column name
colnames(ID.cols)[2] <- "omics.ID"
#read data file from the file
combined.data <- read.delim("data/combinedData",sep = "\t")
#merge two data frames for adding xrefid to the combined data frame
data <- merge(combined.data, ID.cols, by.x = "Identifier", by.y = "omics.ID" )
#remove duplicate rows
data <- data %>% distinct(Identifier, .keep_all = TRUE)
#change column order
data <- data [,c(5,1,2,3,4)]
colnames(data)[2] <- "omics.ID"
#load data to the imported pathway in cytoscape by key column as XrefId
loadTableData(table = "node", data = data, data.key.column = "XrefId", table.key.column = "XrefId")
#make sure to launch cytoscape, if you get CyREST error you need to relaunch cytoscape
cytoscapePing()
#close all opened session before starting
closeSession(FALSE)
#pathway IDs to be visualized
pathway.id <- "WP4723"# omega-3/omega-6 fatty acid synthesis pathway is one of the enriched pathways in our study
#import pathways as pathway in cytoscape
RCy3::commandsRun(paste0('wikipathways import-as-pathway id=',pathway.id ))
#get node table from imported pathway in cytoscape
ID.cols <- getTableColumns(table ="node", columns = c("XrefId","Ensembl", "ChEBI"))
#filter out rows which contain NA value for columns Ensembl and ChEBI
ID.cols <- ID.cols[!with(ID.cols, is.na(Ensembl) & is.na(ChEBI)),]
#if a row value in the Ensembl column is NA then replace it with ChEBI
ID.cols$Ensembl <- ifelse(is.na(ID.cols$Ensembl), ID.cols$ChEBI, ID.cols$Ensembl)
#use the only one column contains both Ensembl and ChEBI identifiers
ID.cols <- data.frame(ID.cols[,c(1,2)])
#change column name
colnames(ID.cols)[2] <- "omics.ID"
#read data file from the file
combined.data <- read.delim("data/combinedData",sep = "\t")
#merge two data frames for adding xrefid to the combined data frame
data <- merge(combined.data, ID.cols, by.x = "Identifier", by.y = "omics.ID" )
#remove duplicate rows
data <- data %>% distinct(Identifier, .keep_all = TRUE)
#change column order
data <- data [,c(5,1,2,3,4)]
colnames(data)[2] <- "omics.ID"
#load data to the imported pathway in cytoscape by key column as XrefId
loadTableData(table = "node", data = data, data.key.column = "XrefId", table.key.column = "XrefId")
#new visual style is created
RCy3::copyVisualStyle("WikiPathways","pathwayStyle")
#set new style as the current style
RCy3::setVisualStyle("pathwayStyle")
#set node dimensions as fixed sizes
RCy3::lockNodeDimensions(TRUE, style.name="pathwayStyle")
#node shape mapping
RCy3::setNodeShapeMapping('Type',c('GeneProduct','Protein', 'Metabolite'),c('ELLIPSE','ELLIPSE','RECTANGLE'),style.name="pathwayStyle")
RCy3::copyVisualStyle("default","pathwayStyle")
RCy3::setVisualStyle("pathwayStyle")
#set node dimensions as fixed sizes
RCy3::lockNodeDimensions(TRUE, style.name="pathwayStyle")
#make sure to launch cytoscape, if you get CyREST error you need to relaunch cytoscape
cytoscapePing()
#close all opened session before starting
closeSession(FALSE)
#pathway IDs to be visualized
pathway.id <- "WP4723"# omega-3/omega-6 fatty acid synthesis pathway is one of the enriched pathways in our study
#import pathways as pathway in cytoscape
RCy3::commandsRun(paste0('wikipathways import-as-pathway id=',pathway.id ))
#get node table from imported pathway in cytoscape
ID.cols <- getTableColumns(table ="node", columns = c("XrefId","Ensembl", "ChEBI"))
#filter out rows which contain NA value for columns Ensembl and ChEBI
ID.cols <- ID.cols[!with(ID.cols, is.na(Ensembl) & is.na(ChEBI)),]
#if a row value in the Ensembl column is NA then replace it with ChEBI
ID.cols$Ensembl <- ifelse(is.na(ID.cols$Ensembl), ID.cols$ChEBI, ID.cols$Ensembl)
#use the only one column contains both Ensembl and ChEBI identifiers
ID.cols <- data.frame(ID.cols[,c(1,2)])
#change column name
colnames(ID.cols)[2] <- "omics.ID"
#read data file from the file
combined.data <- read.delim("data/combinedData",sep = "\t")
#merge two data frames for adding xrefid to the combined data frame
data <- merge(combined.data, ID.cols, by.x = "Identifier", by.y = "omics.ID" )
#remove duplicate rows
data <- data %>% distinct(Identifier, .keep_all = TRUE)
#change column order
data <- data [,c(5,1,2,3,4)]
colnames(data)[2] <- "omics.ID"
#load data to the imported pathway in cytoscape by key column as XrefId
loadTableData(table = "node", data = data, data.key.column = "XrefId", table.key.column = "XrefId")
#new visual style is created
#RCy3::copyVisualStyle("WikiPathways","pathwayStyle")
RCy3::copyVisualStyle("default","pathwayStyle")
#set new style as the current style
RCy3::setVisualStyle("pathwayStyle")
#set node dimensions as fixed sizes
RCy3::lockNodeDimensions(TRUE, style.name="pathwayStyle")
RCy3::setNodeShapeMapping('Type',c('GeneProduct','Protein', 'Metabolite'),c('ELLIPSE','ELLIPSE','RECTANGLE'),style.name="pathwayStyle")
#change node height
RCy3::setNodeHeightMapping('Type',c('GeneProduct','Protein', 'Metabolite'), c(23,23,25), mapping.type = "d", style.name = "pathwayStyle")
#change node width
RCy3::setNodeWidthMapping('Type',c('GeneProduct','Protein', 'Metabolite'), c(60,60,175), mapping.type = "d", style.name = "pathwayStyle")
# check if libraries are already installed > otherwise install it
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
if(!"rstudioapi" %in% installed.packages()) BiocManager::install("rstudioapi")
if(!"RCy3" %in% installed.packages()) BiocManager::install("RCy3")
if(!"rWikiPathways" %in% installed.packages()) BiocManager::install("rWikiPathways")
if(!"RColorBrewer" %in% installed.packages()) BiocManager::install("RColorBrewer")
if(!"dplyr" %in% installed.packages()) BiocManager::install("dplyr")
#load libraries
library(rstudioapi)
library(RCy3)#connect cytoscape via R
library(rWikiPathways)#to get pathways from WikiPathways
library(RColorBrewer)#to manage colors with R
library(dplyr)
# set your working environment to the location where your current source file is saved into.
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
#make sure to launch cytoscape, if you get CyREST error you need to relaunch cytoscape
cytoscapePing()
#close all opened session before starting
closeSession(FALSE)
#pathway IDs to be visualized
pathway.id <- "WP4723"# omega-3/omega-6 fatty acid synthesis pathway is one of the enriched pathways in our study
#import pathways as pathway in cytoscape
RCy3::commandsRun(paste0('wikipathways import-as-pathway id=',pathway.id ))
setwd('..')
dataset.CD <- read.delim("10-identifier_mapping/output/combinedData")
getwd()
combined.data <- read.delim("10-identifier_mapping/output/combinedData")
View(combined.data)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
#get node table from imported pathway in cytoscape
ID.cols <- getTableColumns(table ="node", columns = c("XrefId","Ensembl", "ChEBI"))
#filter out rows which contain NA value for columns Ensembl and ChEBI
ID.cols <- ID.cols[!with(ID.cols, is.na(Ensembl) & is.na(ChEBI)),]
#if a row value in the Ensembl column is NA then replace it with ChEBI
ID.cols$Ensembl <- ifelse(is.na(ID.cols$Ensembl), ID.cols$ChEBI, ID.cols$Ensembl)
#use the only one column contains both Ensembl and ChEBI identifiers
ID.cols <- data.frame(ID.cols[,c(1,2)])
#change column name
colnames(ID.cols)[2] <- "omics.ID"
#merge two data frames for adding xrefid to the combined data frame
data <- merge(combined.data, ID.cols, by.x = "Identifier", by.y = "omics.ID" )
#remove duplicate rows
data <- data %>% distinct(Identifier, .keep_all = TRUE)
#change column order
data <- data [,c(5,1,2,3,4)]
colnames(data)[2] <- "omics.ID"
#load data to the imported pathway in cytoscape by key column as XrefId
loadTableData(table = "node", data = data, data.key.column = "XrefId", table.key.column = "XrefId")
#new visual style is created
RCy3::copyVisualStyle("default","pathwayStyle")
#set new style as the current style
RCy3::setVisualStyle("pathwayStyle")
#set node dimensions as fixed sizes
RCy3::lockNodeDimensions(TRUE, style.name="pathwayStyle")
#node shape mapping
RCy3::setNodeShapeMapping('Type',c('GeneProduct','Protein', 'Metabolite'),c('ELLIPSE','ELLIPSE','RECTANGLE'),style.name="pathwayStyle")
#change node height
RCy3::setNodeHeightMapping('Type',c('GeneProduct','Protein', 'Metabolite'), c(23,23,25), mapping.type = "d", style.name = "pathwayStyle")
#change node width
RCy3::setNodeWidthMapping('Type',c('GeneProduct','Protein', 'Metabolite'), c(60,60,175), mapping.type = "d", style.name = "pathwayStyle")
#set node color based on log2FC for both genes and metabolites
node.colors <- c(rev(brewer.pal(3, "RdBu")))
setNodeColorMapping("log2FC", c(-1,0,1), node.colors, default.color = "#D3D3D3", style.name = "pathwayStyle")
#set node border width and color based on p-value
#first we need to get all p-values from node table
pvalues = getTableColumns(table = 'node',columns = c('name','pvalue'))
min.pval = min(pvalues[,2],na.rm=TRUE)
#get non-significant nodes (p-value>0.05)
nonsign.nodes <- pvalues  %>% filter(pvalue > 0.05, na.rm = TRUE)
#set node border width for all nodes which has a p-value
setNodeBorderWidthMapping('pvalue', c(min.pval,0.05), c(10,10) , mapping.type = "c", style.name = "pathwayStyle")
#set node border color for all nodes which has a p-value
setNodeBorderColorMapping('pvalue', c(min.pval,0.05), c('#00FF00','#00FF00'), style.name = "pathwayStyle")
#filter our non-sign nodes from the visualization
RCy3::setNodeBorderWidthBypass(nonsign.nodes$name, new.sizes = 2)
RCy3::setNodeBorderColorBypass(nonsign.nodes$name, new.colors = "#D3D3D3")
if(!"devtools" %in% installed.packages()) BiocManager::install("devtools")
devtools::install_github("mkearney/rmd2jupyter", force=TRUE)
library(devtools)
library(rmd2jupyter)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rmd2jupyter("visualization.Rmd")
library(rJava)
# check if libraries are already installed > otherwise install it
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
if(!"rstudioapi" %in% installed.packages()) BiocManager::install("rstudioapi")
if(!"dplyr" %in% installed.packages()) BiocManager::install("dplyr")
if(!"tidyr" %in% installed.packages()) BiocManager::install("tidyr")
if(!"readr" %in% installed.packages()) BiocManager::install("readr")
if(!"RCy3" %in% installed.packages()) BiocManager::install("RCy3")
if(!"rWikiPathways" %in% installed.packages()) BiocManager::install("rWikiPathways")
if(!"RColorBrewer" %in% installed.packages()) BiocManager::install("RColorBrewer")
#load installed libraries
library(dplyr)
library(tidyr)
library(readr)
library(RCy3)
library(rWikiPathways)
library(RColorBrewer)
# set your working environment to the location where your current source file is saved into.
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
#Obtain data from step 5:
setwd('..')
## Select a location to create network (options; ileum or rectum)
location <- "rectum"
#read dataset to be processed for ileum or rectum biopsy location
if (location == "ileum") {
deg <- read.delim("5-extract-overlapped_genes/output/DEG.overlapped_ileum")
print("Selected location is ileum")
}else if(location == "rectum"){
deg <- read.delim("5-extract-overlapped_genes/output/DEG.overlapped_rectum")
print("Selected location is rectum")
}
#filter out genes that does not have ENTREZ ID
deg <- deg %>% tidyr:: drop_na(ENTREZ)
#check that cytoscape is connected
cytoscapePing()
#close session before starting
#closeSession(FALSE)
networkName = paste0("PPI_network_",location)
#create a PPI network using overlapped DEGs between CD and UC
#first take the deg input list as a query
x <- readr::format_csv(as.data.frame(deg$ENTREZ), col_names=F, escape = "double", eol =",")
#then use the below function to convert a command string into a CyREST query URL, executes a GET request,
#and parses the result content into an R list object. Same as commandsGET
commandsRun(paste0('string protein query cutoff=0.7', ' newNetName=',networkName, ' query=',x,' limit=0'))
#get proteins (nodes) from the constructed network
proteins <- RCy3::getTableColumns(columns=c("query term", "display name"))
#get edges from the network
ppis     <- RCy3::getTableColumns(table="edge", columns=c("name"))
#split extracted edge information into source-target format
ppis     <- data.frame(do.call('rbind', strsplit(as.character(ppis$name),' (pp) ',fixed=TRUE)))
#merge obtained nodes and edges to get entrez IDs for each source genes
ppis.2   <- merge(ppis, proteins, by.x="X1", by.y="display name", all.x=T)
#change column names
colnames(ppis.2) <- c("s", "t", "source")
#merge again to add entrez IDs of target genes
ppis.3   <- merge(ppis.2, proteins, by.x="t", by.y="display name", all.x=T)
colnames(ppis.3)[4] <-"target"
#ppi3 stores interaction between all proteins so add new column represeting type of interaction
ppis.3$interaction <- "PPI"
#add col names to protein
colnames(proteins) <- c("id","label")
proteins$type <- "protein"
###############get all pathways from WIKIPATHWAYS #################
#below code should be performed first to handle the ssl certificate error uploading pathways
#options(RCurlOptions = list(cainfo = paste0( tempdir() , "/cacert.pem" ), ssl.verifypeer = FALSE))
#wp.hs.gmt <- rWikiPathways::downloadPathwayArchive(organism="Homo sapiens", format = "gmt")
wp.hs.gmt <- "wikipathways-20220210-gmt-Homo_sapiens.gmt"
#Now that we have the latest GMT file for human pathways,
#all wp and gene information stored in wp2gene object
wp2gene   <- rWikiPathways::readPathwayGMT(wp.hs.gmt)
wp2gene   <- rWikiPathways::readPathwayGMT(wp.hs.gmt)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
#Obtain data from step 5:
setwd('..')
## Select a location to create network (options; ileum or rectum)
location <- "rectum"
#read dataset to be processed for ileum or rectum biopsy location
if (location == "ileum") {
deg <- read.delim("5-extract-overlapped_genes/output/DEG.overlapped_ileum")
print("Selected location is ileum")
}else if(location == "rectum"){
deg <- read.delim("5-extract-overlapped_genes/output/DEG.overlapped_rectum")
print("Selected location is rectum")
}
#filter out genes that does not have ENTREZ ID
deg <- deg %>% tidyr:: drop_na(ENTREZ)
#check that cytoscape is connected
cytoscapePing()
#close session before starting
#closeSession(FALSE)
networkName = paste0("PPI_network_",location)
#create a PPI network using overlapped DEGs between CD and UC
#first take the deg input list as a query
x <- readr::format_csv(as.data.frame(deg$ENTREZ), col_names=F, escape = "double", eol =",")
#then use the below function to convert a command string into a CyREST query URL, executes a GET request,
#and parses the result content into an R list object. Same as commandsGET
commandsRun(paste0('string protein query cutoff=0.7', ' newNetName=',networkName, ' query=',x,' limit=0'))
#get proteins (nodes) from the constructed network
proteins <- RCy3::getTableColumns(columns=c("query term", "display name"))
#get edges from the network
ppis     <- RCy3::getTableColumns(table="edge", columns=c("name"))
#split extracted edge information into source-target format
ppis     <- data.frame(do.call('rbind', strsplit(as.character(ppis$name),' (pp) ',fixed=TRUE)))
#merge obtained nodes and edges to get entrez IDs for each source genes
ppis.2   <- merge(ppis, proteins, by.x="X1", by.y="display name", all.x=T)
#change column names
colnames(ppis.2) <- c("s", "t", "source")
#merge again to add entrez IDs of target genes
ppis.3   <- merge(ppis.2, proteins, by.x="t", by.y="display name", all.x=T)
colnames(ppis.3)[4] <-"target"
#ppi3 stores interaction between all proteins so add new column represeting type of interaction
ppis.3$interaction <- "PPI"
#add col names to protein
colnames(proteins) <- c("id","label")
proteins$type <- "protein"
###############get all pathways from WIKIPATHWAYS #################
#below code should be performed first to handle the ssl certificate error uploading pathways
#options(RCurlOptions = list(cainfo = paste0( tempdir() , "/cacert.pem" ), ssl.verifypeer = FALSE))
#wp.hs.gmt <- rWikiPathways::downloadPathwayArchive(organism="Homo sapiens", format = "gmt")
wp.hs.gmt <- "wikipathways-20220210-gmt-Homo_sapiens.gmt"
#Now that we have the latest GMT file for human pathways,
#all wp and gene information stored in wp2gene object
wp2gene   <- rWikiPathways::readPathwayGMT(wp.hs.gmt)
wp2gene   <- rWikiPathways::readPathwayGMT(wp.hs.gmt)
wp2gene.filtered <- wp2gene [wp2gene$gene %in% deg$ENTREZ,]
#change column names
colnames(wp2gene.filtered)[3] <- c("source")
colnames(wp2gene.filtered)[5] <- c("target")
#add new column for representing interaction type
wp2gene.filtered$interaction <- "Pathway-Gene"
#store only wp information
pwy.filtered <- unique( wp2gene [wp2gene$gene %in% deg$ENTREZ,c(1,3)])
colnames(pwy.filtered) <- c("label", "id")
pwy.filtered$type <- "pathway"
colnames(pwy.filtered) <- c("label","id", "type")
#get genes
genes <- unique(deg[,c(1,2)])
genes$type <- "gene"
colnames(genes) <- c("id","label","type")
genes$id <- as.character(genes$id)
#genes and pathways are separate nodes and they need to be merged
nodes.ppi <- dplyr::bind_rows(genes,pwy.filtered)
rownames(nodes.ppi) <- NULL
edges.ppi <- unique(dplyr::bind_rows(ppis.3[,c(3,4,5)], wp2gene.filtered[,c(3,5,6)]))
rownames(edges.ppi) <- NULL
#create a network name
networkName = paste0("PPI_Pathway_Network_",location)
###########Create PPI-pathway network###
RCy3::createNetworkFromDataFrames(nodes= nodes.ppi, edges = edges.ppi, title=networkName, collection=location)
RCy3::loadTableData(nodes.ppi, data.key.column = "label", table="node", table.key.column = "label")
RCy3::loadTableData(deg, data.key.column = "ENTREZ", table.key.column = "id")
###########Visual style#################
RCy3::copyVisualStyle("default","ppi")#Create a new visual style (ppi) by copying a specified style (default)
RCy3::setNodeLabelMapping("label", style.name="ppi")
RCy3::lockNodeDimensions(TRUE, style.name="ppi")#Set a boolean value to have node width and height fixed to a single size value.
#threshold is set based of differential expressed gene criteria
data.values<-c(-0.58,0,0.58)
#red-blue color schema chosen
node.colors <- c(brewer.pal(length(data.values), "RdBu"))
#nodes are split to show both log2fc values for both diseases
RCy3::setNodeCustomHeatMapChart(c("log2FC_CD","log2FC_UC"), slot = 2, style.name = "ppi", colors = c("#CC3300","#FFFFFF","#6699FF","#CCCCCC"))
RCy3::setVisualStyle("ppi")
# Saving output
if(!dir.exists("output")) dir.create("output")
outputName = paste0 ("output/PPI_Pathway_Network_",location,".png")
png.file <- file.path(getwd(), outputName)
exportImage(png.file,'PNG', zoom = 500)
#we will continue with the same session used for ppi-pathway networks
#to check cytoscape is connected
cytoscapePing()
networkName = paste0 ("PPI_Pathway_Network_",location)
#to get network name of the rectum
networkSuid = getNetworkSuid(networkName)
setCurrentNetwork(network=networkSuid)
#create cluster command
clustermaker <- paste("cluster mcl createGroups=TRUE showUI=TRUE network=SUID:",networkSuid, sep="")
#run the command in cytoscape
res <- commandsGET(clustermaker)
#total number of clusters
cat("Total number of clusters for",location, as.numeric(gsub("Clusters: ", "", res[1])))
#change pathway node visualization
pathways <- RCy3::selectNodes(nodes="pathway", by.col = "type")
RCy3::setNodeColorBypass(node.names = pathways$nodes, "#D3D3D3")
RCy3::setNodeBorderWidthBypass(node.names = pathways$nodes, 10)
#export image
outputName = paste0 ("output/PPI_Pathway_Network_",location,"_clustered",".png")
png.file <- file.path(getwd(), outputName)
exportImage(png.file,'PNG', zoom = 500)
#save session
cys.file <- file.path(getwd(), "output/PPI_Pathway_Network_",location,"_clustered",".cys")
saveSession(cys.file)
#Obtain data from step 5:
setwd('..')
## Select a location to create network (options; ileum or rectum)
location <- "ileum"
#read dataset to be processed for ileum or rectum biopsy location
if (location == "ileum") {
deg <- read.delim("5-extract-overlapped_genes/output/DEG.overlapped_ileum")
print("Selected location is ileum")
}else if(location == "rectum"){
deg <- read.delim("5-extract-overlapped_genes/output/DEG.overlapped_rectum")
print("Selected location is rectum")
}
#filter out genes that does not have ENTREZ ID
deg <- deg %>% tidyr:: drop_na(ENTREZ)
#check that cytoscape is connected
cytoscapePing()
#close session before starting
closeSession(FALSE)
networkName = paste0("PPI_network_",location)
#create a PPI network using overlapped DEGs between CD and UC
#first take the deg input list as a query
x <- readr::format_csv(as.data.frame(deg$ENTREZ), col_names=F, escape = "double", eol =",")
#then use the below function to convert a command string into a CyREST query URL, executes a GET request,
#and parses the result content into an R list object. Same as commandsGET
commandsRun(paste0('string protein query cutoff=0.7', ' newNetName=',networkName, ' query=',x,' limit=0'))
#get proteins (nodes) from the constructed network
proteins <- RCy3::getTableColumns(columns=c("query term", "display name"))
#get edges from the network
ppis     <- RCy3::getTableColumns(table="edge", columns=c("name"))
#split extracted edge information into source-target format
ppis     <- data.frame(do.call('rbind', strsplit(as.character(ppis$name),' (pp) ',fixed=TRUE)))
#merge obtained nodes and edges to get entrez IDs for each source genes
ppis.2   <- merge(ppis, proteins, by.x="X1", by.y="display name", all.x=T)
#change column names
colnames(ppis.2) <- c("s", "t", "source")
#merge again to add entrez IDs of target genes
ppis.3   <- merge(ppis.2, proteins, by.x="t", by.y="display name", all.x=T)
colnames(ppis.3)[4] <-"target"
#ppi3 stores interaction between all proteins so add new column represeting type of interaction
ppis.3$interaction <- "PPI"
#add col names to protein
colnames(proteins) <- c("id","label")
proteins$type <- "protein"
###############get all pathways from WIKIPATHWAYS #################
#below code should be performed first to handle the ssl certificate error uploading pathways
#options(RCurlOptions = list(cainfo = paste0( tempdir() , "/cacert.pem" ), ssl.verifypeer = FALSE))
#wp.hs.gmt <- rWikiPathways::downloadPathwayArchive(organism="Homo sapiens", format = "gmt")
wp.hs.gmt <- "wikipathways-20220210-gmt-Homo_sapiens.gmt"
#Now that we have the latest GMT file for human pathways,
#all wp and gene information stored in wp2gene object
wp2gene   <- rWikiPathways::readPathwayGMT(wp.hs.gmt)
wp2gene   <- rWikiPathways::readPathwayGMT(wp.hs.gmt)
wp2gene.filtered <- wp2gene [wp2gene$gene %in% deg$ENTREZ,]
#change column names
colnames(wp2gene.filtered)[3] <- c("source")
colnames(wp2gene.filtered)[5] <- c("target")
#add new column for representing interaction type
wp2gene.filtered$interaction <- "Pathway-Gene"
#store only wp information
pwy.filtered <- unique( wp2gene [wp2gene$gene %in% deg$ENTREZ,c(1,3)])
colnames(pwy.filtered) <- c("label", "id")
pwy.filtered$type <- "pathway"
colnames(pwy.filtered) <- c("label","id", "type")
#get genes
genes <- unique(deg[,c(1,2)])
genes$type <- "gene"
colnames(genes) <- c("id","label","type")
genes$id <- as.character(genes$id)
#genes and pathways are separate nodes and they need to be merged
nodes.ppi <- dplyr::bind_rows(genes,pwy.filtered)
rownames(nodes.ppi) <- NULL
edges.ppi <- unique(dplyr::bind_rows(ppis.3[,c(3,4,5)], wp2gene.filtered[,c(3,5,6)]))
rownames(edges.ppi) <- NULL
#create a network name
networkName = paste0("PPI_Pathway_Network_",location)
###########Create PPI-pathway network###
RCy3::createNetworkFromDataFrames(nodes= nodes.ppi, edges = edges.ppi, title=networkName, collection=location)
RCy3::loadTableData(nodes.ppi, data.key.column = "label", table="node", table.key.column = "label")
RCy3::loadTableData(deg, data.key.column = "ENTREZ", table.key.column = "id")
###########Visual style#################
RCy3::copyVisualStyle("default","ppi")#Create a new visual style (ppi) by copying a specified style (default)
RCy3::setNodeLabelMapping("label", style.name="ppi")
RCy3::lockNodeDimensions(TRUE, style.name="ppi")#Set a boolean value to have node width and height fixed to a single size value.
#threshold is set based of differential expressed gene criteria
data.values<-c(-0.58,0,0.58)
#red-blue color schema chosen
node.colors <- c(brewer.pal(length(data.values), "RdBu"))
#nodes are split to show both log2fc values for both diseases
RCy3::setNodeCustomHeatMapChart(c("log2FC_CD","log2FC_UC"), slot = 2, style.name = "ppi", colors = c("#CC3300","#FFFFFF","#6699FF","#CCCCCC"))
RCy3::setVisualStyle("ppi")
# Saving output
if(!dir.exists("output")) dir.create("output")
outputName = paste0 ("output/PPI_Pathway_Network_",location,".png")
png.file <- file.path(getwd(), outputName)
exportImage(png.file,'PNG', zoom = 500)
#we will continue with the same session used for ppi-pathway networks
#to check cytoscape is connected
cytoscapePing()
networkName = paste0 ("PPI_Pathway_Network_",location)
#to get network name of the rectum
networkSuid = getNetworkSuid(networkName)
setCurrentNetwork(network=networkSuid)
#create cluster command
clustermaker <- paste("cluster mcl createGroups=TRUE showUI=TRUE network=SUID:",networkSuid, sep="")
#run the command in cytoscape
res <- commandsGET(clustermaker)
#total number of clusters
cat("Total number of clusters for",location, as.numeric(gsub("Clusters: ", "", res[1])))
#change pathway node visualization
pathways <- RCy3::selectNodes(nodes="pathway", by.col = "type")
RCy3::setNodeColorBypass(node.names = pathways$nodes, "#D3D3D3")
RCy3::setNodeBorderWidthBypass(node.names = pathways$nodes, 10)
#export image
outputName = paste0 ("output/PPI_Pathway_Network_",location,"_clustered",".png")
png.file <- file.path(getwd(), outputName)
exportImage(png.file,'PNG', zoom = 500)
#save session
cys.file <- file.path(getwd(), "output/PPI_Pathway_Network_",location,"_clustered",".cys")
saveSession(cys.file)
#Jupyter Notebook file
if(!"devtools" %in% installed.packages()) BiocManager::install("devtools")
devtools::install_github("mkearney/rmd2jupyter", force=TRUE)
library(devtools)
library(rmd2jupyter)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rmd2jupyter("Network_analysis.Rmd")
