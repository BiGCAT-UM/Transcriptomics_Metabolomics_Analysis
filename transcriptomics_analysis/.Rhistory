)
#close all opened session before starting
closeSession(FALSE)# clears all session data without saving
#pathway IDs
pathway.id <- "WP4723"# omega-3/omega-6 fatty acid synthesis pathway is one of the enriched pathways in our study
#so we will visualize the pathway in cytoscape
##### STEP-1 Open three enriched pathways #########
#import pathways as network in cytoscape
RCy3::commandsRun(paste0('wikipathways import-as-pathway id=',pathway.id ))
#read gene data table from the file
geneData <- read.delim("data/geneData")
#load data to the pathway in cytoscape
loadTableData(table = "node", data = dataset, data.key.column = "ENSEMBL.ID", table.key.column = "Ensembl")
#read mbx data
mbxData <- read.delim("data/mbxData")
#load mbx data to the pathway in cytoscape
loadTableData(table = "node", data = mbxData, data.key.column = "CHEBI", table.key.column = "ChEBI")
RCy3::copyVisualStyle("default","pathwayStyle")
RCy3::setNodeLabelMapping("name", style.name="pathwayStyle")
RCy3::lockNodeDimensions(TRUE, style.name="pathwayStyle")
#assign different shapes based on data type
RCy3::setNodeShapeMapping('data.type', c('transcriptomics','metabolomics'), c("ellipse","rectangle"), style.name="pathwayStyle")
#chnage node sizes
RCy3::setNodeSizeMapping('data.type', c('transcriptomics','metabolomics'), c(40,25), mapping.type = "d", style.name = "pathwayStyle")
#node color values
data.values  <- c(-0.58,0,0.58) #try like this
node.colors  <- c(rev(brewer.pal(length(data.values), "RdBu")))
RCy3::setNodeCustomHeatMapChart(c("log2FoldChange"),
slot = 1,
style.name = "pathwayStyle",
colors = c(node.colors)
)
RCy3::setNodeCustomHeatMapChart("log2FoldChange",
slot = 1,
style.name = "pathwayStyle",
colors = c(node.colors)
)
#close all opened session before starting
closeSession(FALSE)# clears all session data without saving
#pathway IDs
pathway.id <- "WP4723"# omega-3/omega-6 fatty acid synthesis pathway is one of the enriched pathways in our study
##### STEP-1 Open three enriched pathways #########
#import pathways as network in cytoscape
RCy3::commandsRun(paste0('wikipathways import-as-pathway id=',pathway.id ))
#read gene data table from the file
geneData <- read.delim("data/geneData")
#load data to the pathway in cytoscape
loadTableData(table = "node", data = dataset, data.key.column = "ENSEMBL.ID", table.key.column = "Ensembl")
#read mbx data
mbxData <- read.delim("data/mbxData")
#load mbx data to the pathway in cytoscape
loadTableData(table = "node", data = mbxData, data.key.column = "CHEBI", table.key.column = "ChEBI")
RCy3::copyVisualStyle("default","pathwayStyle")
RCy3::setNodeLabelMapping("name", style.name="pathwayStyle")
RCy3::lockNodeDimensions(TRUE, style.name="pathwayStyle")
RCy3::setNodeShapeMapping('data.type', c('transcriptomics','metabolomics'), c("ellipse","rectangle"), style.name="pathwayStyle")
#chnage node sizes
RCy3::setNodeSizeMapping('data.type', c('transcriptomics','metabolomics'), c(40,25), mapping.type = "d", style.name = "pathwayStyle")
setNodeColorMapping("data.type", c('transcriptomics','metabolomics'), c("#EBCD9E","#70A689"), mapping.type = 'd', default.color = "#99FF99", style.name = "pathwayStyle")
setNodeColorMapping("data.type", c('transcriptomics','metabolomics'), c("#f5cbec","#1619d9"), mapping.type = 'd', default.color = "#7f857f", style.name = "pathwayStyle")
setNodeColorMapping("data.type", c('transcriptomics','metabolomics'), c("#f5cbec","#1619d9"), mapping.type = 'd', default.color = "#c6c6cf", style.name = "pathwayStyle")
setNodeColorMapping("data.type", c('transcriptomics','metabolomics'), c("#f5cbec","#f5ee31"), mapping.type = 'd', default.color = "#c6c6cf", style.name = "pathwayStyle")
log2FCgenes = getTableColumns('node','log2FoldChange')
View(log2FCgenes)
min.logFC = min(log2FCgenes[,1],na.rm=TRUE)
max.logFC = max(log2FCgenes[,1],na.rm=TRUE)
display.brewer.all(length(data.values), colorblindFriendly=TRUE, type="div") # div,qual,seq,all
node.colors <- c(rev(brewer.pal(length(data.values), "RdBu")))
setNodeColorMapping('log2FoldChange', data.values, node.colors, style.name="pathwayStyle")
setNodeBorderColorMapping('data.type',c('transcriptomics','metabolomics'),c("#f5cbec","#f5ee31"),style.name=pathwayStyle)
setNodeBorderColorMapping('data.type',c('transcriptomics','metabolomics'),c("#f5cbec","#f5ee31"),style.name="pathwayStyle")
setNodeBorderColorMapping("data.type",c('transcriptomics','metabolomics'),c("#f5cbec","#f5ee31"),style.name="pathwayStyle")
setNodeColorMapping("data.type", c('transcriptomics','metabolomics'), c("#f5cbec","#f5ee31"), mapping.type = 'd', default.color = "#c6c6cf", style.name = "pathwayStyle")
setNodeColorMapping('log2FoldChange', data.values, node.colors, style.name="pathwayStyle")
# check if libraries are already installed > otherwise install it
if(!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager",repos = "http://cran.us.r-project.org")
if(!"rstudioapi" %in% installed.packages()) BiocManager::install("rstudioapi")
if(!"readxl" %in% installed.packages()) BiocManager::install("readxl")
if(!"dplyr" %in% installed.packages()) BiocManager::install("dplyr")
#load libraries
library(rstudioapi)
library(readxl)
library(dplyr)
# set your working environment to the location where your current source file is saved into.
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
#we first read metadata
htxMeta <- read.csv("data/hmp2_metadata_2018-08-20.csv")
#filter out by data type as host-transcriptomics
htxMeta <- htxMeta  %>% filter(htxMeta$data_type == "host_transcriptomics")
View(htxMeta)
htxMeta <-htxMeta  %>% filter(  (htxMeta$diagnosis == "CD" & htxMeta$biopsy_location=="Ileum")
| (htxMeta$diagnosis == "CD" & htxMeta$biopsy_location=="Rectum")
| (htxMeta$diagnosis == "UC" & htxMeta$biopsy_location=="Ileum")
| (htxMeta$diagnosis == "UC" & htxMeta$biopsy_location=="Rectum")
| (htxMeta$diagnosis == "nonIBD" & htxMeta$biopsy_location=="Rectum")
| (htxMeta$diagnosis == "nonIBD" & htxMeta$biopsy_location=="Ileum")
)
#filter out samples by visit_num=1
htxMeta <-htxMeta  %>% filter(htxMeta$visit_num == "1")
#filter out by data type as host-transcriptomics
htxMeta <- htxMeta  %>% filter(htxMeta$data_type == "host_transcriptomics")
#we first read metadata
htxMeta <- read.csv("data/hmp2_metadata_2018-08-20.csv")
#filter out by data type as host-transcriptomics
htxMeta <- htxMeta  %>% filter(htxMeta$data_type == "host_transcriptomics")
View(htxMeta)
# check if libraries are already installed > otherwise install it
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
if(!"rstudioapi" %in% installed.packages()) BiocManager::install("rstudioapi")
if(!"RCy3" %in% installed.packages()) BiocManager::install("RCy3")
if(!"rWikiPathways" %in% installed.packages()) BiocManager::install("rWikiPathways")
if(!"RColorBrewer" %in% installed.packages()) BiocManager::install("RColorBrewer")
#load libraries
library(rstudioapi)
library(RCy3)#connect cytoscape via R
library(rWikiPathways)#to get pathways from WikiPathways
library(RColorBrewer)#to manage colors with R
# set your working environment to the location where your current source file is saved into.
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
#make sure to launch cytoscape, if you get CyREST error you need to relaunch cytoscape
cytoscapePing()
#color nodes based on log2FC
log2FCgenes = getTableColumns('node','log2FC_gene')
min.logFC = min(log2FCgenes[,1],na.rm=TRUE)
max.logFC = max(log2FCgenes[,1],na.rm=TRUE)
data.values = c(min.logFC,0,max.logFC)
display.brewer.all(length(data.values), colorblindFriendly=TRUE, type="div") # div,qual,seq,all
node.colors <- c(rev(brewer.pal(length(data.values), "RdBu")))
setNodeColorMapping('log2FoldChange', data.values, node.colors, default.color = "#D3D3D3", style.name="pathwayStyle")
setNodeColorMapping('log2FC_gene', data.values, node.colors, default.color = "#D3D3D3", style.name="pathwayStyle")
#pathway IDs
pathway.id <- "WP4723"# omega-3/omega-6 fatty acid synthesis pathway is one of the enriched pathways in our study
##### STEP-1 Open enriched pathway #########
#import pathways as network in cytoscape
RCy3::commandsRun(paste0('wikipathways import-as-pathway id=',pathway.id ))
#upload gene data table from the file
geneData <- read.delim("data/transcriptomics")
#load data to the pathway in cytoscape
loadTableData(table = "node", data = geneData, data.key.column = "ENSEMBL.ID", table.key.column = "Ensembl")
#read mbx data
mbxData <- read.delim("data/metabolomics")
#load mbx data to the pathway in cytoscape
loadTableData(table = "node", data = mbxData, data.key.column = "CHEBI", table.key.column = "ChEBI")
##visual style##
RCy3::copyVisualStyle("default","pathwayStyle")
RCy3::setNodeShapeMapping('data.type', c('transcriptomics','metabolomics'), c("ELLIPSE","OCTAGON"), style.name="pathwayStyle")
##### STEP-1 Open enriched pathway #########
#import pathways as network in cytoscape
RCy3::commandsRun(paste0('wikipathways import-as-pathway id=',pathway.id ))
geneData <- read.delim("data/transcriptomics")
#load data to the pathway in cytoscape
loadTableData(table = "node", data = geneData, data.key.column = "ENSEMBL.ID", table.key.column = "Ensembl")
#read mbx data
mbxData <- read.delim("data/metabolomics")
#load mbx data to the pathway in cytoscape
loadTableData(table = "node", data = mbxData, data.key.column = "CHEBI", table.key.column = "ChEBI")
##visual style##
RCy3::copyVisualStyle("default","pathwayStyle")
RCy3::setNodeShapeMapping('data.type', c('transcriptomics','metabolomics'), c("ELLIPSE","OCTAGON"), style.name="pathwayStyle")
setNodeColorMapping('data.type', c("transcriptomics","metabolomics"), c("#ffc0cb","ffff00"), style.name="pathwayStyle")
setNodeColorMapping('data.type', c("transcriptomics","metabolomics"), c("#FFC0CB","FFFF00"), style.name="pathwayStyle")
setNodeColorMapping('data.type', c("transcriptomics","metabolomics"), c("#FFC0CB","#FFFF00"), style.name="pathwayStyle")
setNodeColorMapping('log2FC_gene', data.values, node.colors, mapping.type = "d", default.color = "#D3D3D3", style.name="pathwayStyle")
setNodeColorMapping('data.type', c("transcriptomics","metabolomics"), mapping.type = "d", c("#FFC0CB","#FFFF00"), style.name="pathwayStyle")
log2FCgenes = getTableColumns('node','log2FC_gene')
min.logFC = min(log2FCgenes[,1],na.rm=TRUE)
max.logFC = max(log2FCgenes[,1],na.rm=TRUE)
data.values = c(min.logFC,0,max.logFC)
display.brewer.all(length(data.values), colorblindFriendly=TRUE, type="div") # div,qual,seq,all
node.colors <- c(rev(brewer.pal(length(data.values), "RdBu")))
setNodeColorMapping('log2FC_gene', data.values, node.colors, style.name="pathwayStyle")
createColumnFilter("metabolomicsFilter", "data.type", "metabolomics","IS")
setNodeSelectionColorDefault('#FD5903')
setNodeSelectionColorDefault('#FD5903',style.name = "pathwayStyle")
#close all opened session before starting
closeSession(FALSE)# close all opened sessions data without saving
##### STEP-1 Open enriched pathway #########
#import pathways as network in cytoscape
RCy3::commandsRun(paste0('wikipathways import-as-pathway id=',pathway.id ))
#upload gene data table from the file
geneData <- read.delim("data/transcriptomics")
#load data to the pathway in cytoscape
loadTableData(table = "node", data = geneData, data.key.column = "ENSEMBL.ID", table.key.column = "Ensembl")
#read mbx data
mbxData <- read.delim("data/metabolomics")
#load mbx data to the pathway in cytoscape
loadTableData(table = "node", data = mbxData, data.key.column = "CHEBI", table.key.column = "ChEBI")
RCy3::copyVisualStyle("default","pathwayStyle")
#RCy3::setNodeLabelMapping("name", style.name="pathwayStyle")
#RCy3::lockNodeDimensions(TRUE, style.name="pathwayStyle")
#assign different shapes based on data type
RCy3::setNodeShapeMapping('data.type', c('transcriptomics','metabolomics'), c("ELLIPSE","OCTAGON"), style.name="pathwayStyle")
#change node sizes
RCy3::setNodeSizeMapping('data.type', c('transcriptomics','metabolomics'), c(40,25), mapping.type = "d", style.name = "pathwayStyle")
log2FCgenes = getTableColumns('node','log2FC_gene')
min.logFC = min(log2FCgenes[,1],na.rm=TRUE)
max.logFC = max(log2FCgenes[,1],na.rm=TRUE)
data.values = c(min.logFC,0,max.logFC)
display.brewer.all(length(data.values), colorblindFriendly=TRUE, type="div") # div,qual,seq,all
node.colors <- c(rev(brewer.pal(length(data.values), "RdBu")))
setNodeColorMapping('log2FC_gene', data.values, node.colors, style.name="pathwayStyle")
#node border with based on p-value
pvalues = getTableColumns('node','pvalue_gene')
min.pval = min(pvalues[,1],na.rm=TRUE)
RCy3::setNodeBorderWidthMapping('pvalue', c(min.pval,0.05), c(5,1),style.name = "pathwayStyle")
#gene nodes are colored based on log2FC and pvalue
log2FCgenes = getTableColumns('node','log2FC_gene')
min.logFC = min(log2FCgenes[,1],na.rm=TRUE)
max.logFC = max(log2FCgenes[,1],na.rm=TRUE)
data.values = c(min.logFC,0,max.logFC)
display.brewer.all(length(data.values), colorblindFriendly=TRUE, type="div") # div,qual,seq,all
node.colors <- c(rev(brewer.pal(length(data.values), "RdBu")))
setNodeColorMapping('log2FC_gene', data.values, node.colors, style.name="pathwayStyle")
#node border with based on p-value
pvalues = getTableColumns('node','pvalue_gene')
min.pval = min(pvalues[,1],na.rm=TRUE)
RCy3::setNodeBorderWidthMapping('pvalue_gene', c(min.pval,0.05), c(5,1),style.name = "pathwayStyle")
RCy3::setNodeBorderColorMapping('pvalue_gene', c(min.pval,0.05), c('#00FF00','#00FF00'),style.name = "pathwayStyle")
setNodeColorMapping('log2FC_gene', data.values, node.colors, style.name="pathwayStyle", default = "#808080")
#node border with based on p-value
pvalues = getTableColumns('node','pvalue_gene')
min.pval = min(pvalues[,1],na.rm=TRUE)
RCy3::setNodeBorderWidthMapping('pvalue_gene', c(min.pval,0.05), c(5,1),style.name = "pathwayStyle")
RCy3::setNodeBorderColorMapping('pvalue_gene', c(min.pval,0.05), c('#00FF00','#00FF00'),style.name = "pathwayStyle")
log2FCgenes = getTableColumns('node','log2FC_gene')
min.logFC = min(log2FCgenes[,1],na.rm=TRUE)
max.logFC = max(log2FCgenes[,1],na.rm=TRUE)
data.values = c(min.logFC,0,max.logFC)
display.brewer.all(length(data.values), colorblindFriendly=TRUE, type="div") # div,qual,seq,all
node.colors <- c(rev(brewer.pal(length(data.values), "RdBu")))
setNodeColorMapping('log2FC_gene', data.values, node.colors, style.name="pathwayStyle", default = "#D3D3D3")
#node border with based on p-value
pvalues = getTableColumns('node','pvalue_gene')
min.pval = min(pvalues[,1],na.rm=TRUE)
RCy3::setNodeBorderWidthMapping('pvalue_gene', c(min.pval,0.05), c(5,1),style.name = "pathwayStyle")
RCy3::setNodeBorderColorMapping('pvalue_gene', c(min.pval,0.05), c('#00FF00','#00FF00'),style.name = "pathwayStyle")
#for coloring metabolomics data first we create a column filter to select met data
createColumnFilter("metabolomicsFilter", "data.type", "metabolomics","IS")
#set met nodes
setNodeSelectionColorDefault('#FD5903',style.name = "pathwayStyle")
createColumnFilter("metabolomicsFilter", "data.type", "metabolomics","IS")
#set met nodes
setNodeSelectionColorDefault('#FF69B4',style.name = "pathwayStyle")
RCy3::setNodeShapeMapping('data.type', c('transcriptomics','metabolomics'), c("ELLIPSE","RECTANGLE"), style.name="pathwayStyle")
#change node sizes
RCy3::setNodeSizeMapping('data.type', c('transcriptomics','metabolomics'), c(40,40), mapping.type = "d", style.name = "pathwayStyle")
#close all opened session before starting
closeSession(FALSE)# close all opened sessions data without saving
RCy3::commandsRun(paste0('wikipathways import-as-pathway id=',pathway.id ))
#RCy3::commandsRun(paste0('wikipathways import-as-network id=',pathway.id ))
#upload gene data table from the file
geneData <- read.delim("data/transcriptomics")
#load data to the pathway in cytoscape
loadTableData(table = "node", data = geneData, data.key.column = "ENSEMBL.ID", table.key.column = "Ensembl")
#read mbx data
mbxData <- read.delim("data/metabolomics")
#load mbx data to the pathway in cytoscape
loadTableData(table = "node", data = mbxData, data.key.column = "CHEBI", table.key.column = "ChEBI")
RCy3::copyVisualStyle("default","pathwayStyle")
#RCy3::setNodeLabelMapping("name", style.name="pathwayStyle")
#RCy3::lockNodeDimensions(TRUE, style.name="pathwayStyle")
#assign different shapes based on data type
RCy3::setNodeShapeMapping('data.type', c('transcriptomics','metabolomics'), c("ELLIPSE","RECTANGLE"), style.name="pathwayStyle")
#change node sizes
RCy3::setNodeSizeMapping('data.type', c('transcriptomics','metabolomics'), c(40,40), mapping.type = "d", style.name = "pathwayStyle")
log2FCgenes = getTableColumns('node','log2FC_gene')
min.logFC = min(log2FCgenes[,1],na.rm=TRUE)
max.logFC = max(log2FCgenes[,1],na.rm=TRUE)
data.values = c(min.logFC,0,max.logFC)
display.brewer.all(length(data.values), colorblindFriendly=TRUE, type="div") # div,qual,seq,all
node.colors <- c(rev(brewer.pal(length(data.values), "RdBu")))
setNodeColorMapping('log2FC_gene', data.values, node.colors, style.name="pathwayStyle", default = "#D3D3D3")
#node border with based on p-value
pvalues = getTableColumns('node','pvalue_gene')
min.pval = min(pvalues[,1],na.rm=TRUE)
RCy3::setNodeBorderWidthMapping('pvalue_gene', c(min.pval,0.05), c(5,1),style.name = "pathwayStyle")
RCy3::setNodeBorderColorMapping('pvalue_gene', c(min.pval,0.05), c('#00FF00','#00FF00'),style.name = "pathwayStyle")
#for coloring metabolomics data first we create a column filter to select met data
createColumnFilter("metabolomicsFilter", "data.type", "metabolomics","IS")
#set met nodes
createColumnFilter('metabolomicsFilter', 'pValue_met', 0.05, "LESS_THAN")
#set met nodes
createColumnFilter('metabolomicsFilter', 'pvalue_met', 0.05, "LESS_THAN")
createColumnFilter("metabolomicsFilter", "data.type", "metabolomics","IS")
#set met nodes
createColumnFilter('metabolomicsFilter', 'pvalue_met', 0.05, "LESS_THAN")
setNodeSelectionColorDefault('#FF69B4',style.name = "pathwayStyle")
createColumnFilter("metabolomicsFilter", "data.type", "metabolomics","IS")
#set met nodes
createColumnFilter('metabolomicsFilter', 'pvalue_met', 0.05, "LESS_THAN")
setNodeSelectionColorDefault('#FF69B4',style.name = "pathwayStyle")
# check if libraries are already installed > otherwise install it
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
if(!"rstudioapi" %in% installed.packages()) BiocManager::install("rstudioapi")
if(!"RCy3" %in% installed.packages()) BiocManager::install("RCy3")
if(!"rWikiPathways" %in% installed.packages()) BiocManager::install("rWikiPathways")
if(!"RColorBrewer" %in% installed.packages()) BiocManager::install("RColorBrewer")
if(!"dplyr" %in% installed.packages()) BiocManager::install("dplyr")
#load libraries
library(rstudioapi)
library(RCy3)#connect cytoscape via R
library(rWikiPathways)#to get pathways from WikiPathways
library(RColorBrewer)#to manage colors with R
library(dplyr)
# set your working environment to the location where your current source file is saved into.
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
#make sure to launch cytoscape, if you get CyREST error you need to relaunch cytoscape
cytoscapePing()
#close all opened session before starting
closeSession(FALSE)
#pathway IDs to be visualized
pathway.id <- "WP4723"# omega-3/omega-6 fatty acid synthesis pathway is one of the enriched pathways in our study
#import pathways as pathway in cytoscape
RCy3::commandsRun(paste0('wikipathways import-as-pathway id=',pathway.id ))
#get node table from imported pathway in cytoscape
ID.cols <- getTableColumns(table ="node", columns = c("XrefId","Ensembl", "ChEBI"))
#filter out rows which contain NA value for columns Ensembl and ChEBI
ID.cols <- ID.cols[!with(ID.cols, is.na(Ensembl) & is.na(ChEBI)),]
#if a row value in the Ensembl column is NA then replace it with ChEBI
ID.cols$Ensembl <- ifelse(is.na(ID.cols$Ensembl), ID.cols$ChEBI, ID.cols$Ensembl)
#use the only one column contains both Ensembl and ChEBI identifiers
ID.cols <- data.frame(ID.cols[,c(1,2)])
#change column name
colnames(ID.cols)[2] <- "omics.ID"
#read data file from the file
combined.data <- read.delim("data/combinedData",sep = "\t")
#merge two data frames for adding xrefid to the combined data frame
data <- merge(combined.data, ID.cols, by.x = "Identifier", by.y = "omics.ID" )
#remove duplicate rows
data <- data %>% distinct(Identifier, .keep_all = TRUE)
#change column order
data <- data [,c(5,1,2,3,4)]
colnames(data)[2] <- "omics.ID"
#load data to the imported pathway in cytoscape by key column as XrefId
loadTableData(table = "node", data = data, data.key.column = "XrefId", table.key.column = "XrefId")
#new visual style is created
RCy3::copyVisualStyle("default","pathwayStyle")
#set new style as the current style
RCy3::setVisualStyle("pathwayStyle")
RCy3::setNodeShapeMapping('Type',c('GeneProduct','Protein', 'Metabolite'),c('ELLIPSE','ELLIPSE','RECTANGLE'),style.name="pathwayStyle")
#change node height
RCy3::setNodeHeightMapping('Type',c('GeneProduct','Protein', 'Metabolite'), c(23,23,25), mapping.type = "d", style.name = "pathwayStyle")
#change node width
RCy3::setNodeWidthMapping('Type',c('GeneProduct','Protein', 'Metabolite'), c(60,60,175), mapping.type = "d", style.name = "pathwayStyle")
# check if libraries are already installed > otherwise install it
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
if(!"rstudioapi" %in% installed.packages()) BiocManager::install("rstudioapi")
if(!"RColorBrewer" %in% installed.packages()) BiocManager::install("RColorBrewer")
if(!"dplyr" %in% installed.packages()) BiocManager::install("dplyr")
if(!"pheatmap" %in% installed.packages()) BiocManager::install("pheatmap")
#loading installed libraries
library(RColorBrewer)
library(dplyr)
library (pheatmap)
# set your working environment to the location where your current source file is saved into.
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
#read all pathway lists
CD.ileum <- read.delim("data/enrichResults_CD_ileum",sep = "\t", header = TRUE)
CD.rectum <- read.delim("data/enrichResults_CD_rectum", sep = "\t",header = TRUE)
UC.ileum <- read.delim("data/enrichResults_UC_ileum",sep = "\t", header = TRUE)
UC.rectum <- read.delim("data/enrichResults_UC_rectum", sep = "\t",header = TRUE)
#we need to get pathways that has p.adjust value lower than 0.05 and qvalue<0.02
#To prevent high false discovery rate (FDR) in multiple testing, q-values are also estimated for FDR control.
CD.ileum.f <- CD.ileum[(CD.ileum$p.adjust<0.05)&(CD.ileum$qvalue<0.02),]
CD.rectum.f <- CD.rectum[(CD.rectum$p.adjust<0.05)&(CD.rectum$qvalue<0.02),]
UC.ileum.f <- UC.ileum[(UC.ileum$p.adjust<0.05)&(UC.ileum$qvalue<0.02),]
UC.rectum.f <- UC.rectum[(UC.rectum$p.adjust<0.05)&(UC.rectum$qvalue<0.02),]
View(UC.ileum)
View(UC.ileum.f)
View(CD.ileum.f)
View(CD.rectum.f)
View(UC.ileum.f)
View(UC.rectum.f)
View(UC.ileum.f)
# check if libraries are already installed > otherwise install it
if(!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager",repos = "http://cran.us.r-project.org")
if(!"rstudioapi" %in% installed.packages()) BiocManager::install("rstudioapi")
if(!"readxl" %in% installed.packages()) BiocManager::install("readxl")
if(!"dplyr" %in% installed.packages()) BiocManager::install("dplyr")
#load libraries
library(rstudioapi)
library(readxl)
library(dplyr)
# set working environment to the location where current source file is saved into.
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
##Download metadata, extract transcriptomics sample IDs, location and disorders.
if(file.exists("data/hmp2_metadata.csv")){print("Metadata already downloaded")}else{
fileUrl <- "https://ibdmdb.org/tunnel/products/HMP2/Metadata/hmp2_metadata.csv?accessType=DOWNLOAD"
require(downloader)
download(fileUrl, "data/hmp2_metadata.csv", mode = "wb")
}
#Read metadata
htxMeta <- read.csv("data/hmp2_metadata.csv")
#filter out by data type as host-transcriptomics
htxMeta <- htxMeta  %>% filter(htxMeta$data_type == "host_transcriptomics")
#filter out data by biopsy location, include CD, UC and nonIBD samples from ileum and rectum location
htxMeta <-htxMeta  %>% filter(  (htxMeta$diagnosis == "CD" & htxMeta$biopsy_location=="Ileum")
| (htxMeta$diagnosis == "CD" & htxMeta$biopsy_location=="Rectum")
| (htxMeta$diagnosis == "UC" & htxMeta$biopsy_location=="Ileum")
| (htxMeta$diagnosis == "UC" & htxMeta$biopsy_location=="Rectum")
| (htxMeta$diagnosis == "nonIBD" & htxMeta$biopsy_location=="Rectum")
| (htxMeta$diagnosis == "nonIBD" & htxMeta$biopsy_location=="Ileum")
)
#filter out samples by visit_num=1
htxMeta <-htxMeta  %>% filter(htxMeta$visit_num == "1")
#filter out unused columns
htxMeta <- htxMeta %>% dplyr::select(External.ID,Participant.ID,biopsy_location,diagnosis)
#Order htxMeta data based on external ID to match samples with htx count correctly
htxMeta<- htxMeta[order(htxMeta$External.ID),]#order htxMeta by external ID
```{r read_filter_count_data, warning=FALSE, message=FALSE}
#transcript count (htx count) original file is read
htxOrj <- read.csv("data/host_tx_counts.tsv",sep = "\t")
#Convert sample names to upper (some of them are in lower case)
colnames(htxOrj)<-toupper(colnames(htxOrj))
#htx count data is filtered based on column names in htxMeta
names.use <- names(htxOrj)[(names(htxOrj) %in% htxMeta$External.ID)]
#filter out htxOrj based on names.use and create a new htxCount
htxCount <- htxOrj[, names.use]
#htxCount data are ordered based on column names to match samples between htxCount and sampleLabels
htxCount <- htxCount[,order(names(htxCount))]
#sample distribution based on biopsy locations
ileum =nrow(htxMeta[htxMeta$biopsy_location=="Ileum",])
rectum = nrow(htxMeta[htxMeta$biopsy_location=="Rectum",])
cat ("Number of samples in ileum:", ileum ,"\nNumber of samples in rectum:",rectum)
colnames(htxCount) == htxMeta[,"External.ID"]
write.table(htxCount, "output/htxCount.csv", sep=",",quote=FALSE, row.names = TRUE )
write.table(htxMeta, "output/sampleLabels.csv", sep=",",quote=FALSE,row.names = FALSE, col.names = FALSE)
#Jupyter Notebook file
if(!"devtools" %in% installed.packages()) BiocManager::install("devtools")
devtools::install_github("mkearney/rmd2jupyter", force=TRUE)
library(devtools)
library(rmd2jupyter)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rmd2jupyter("dataPrep.Rmd")
# check if libraries are already installed > otherwise install it
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
if(!"rstudioapi" %in% installed.packages()) BiocManager::install("rstudioapi")
if(!"dplyr" %in% installed.packages()) BiocManager::install("dplyr")
if(!"tidyr" %in% installed.packages()) BiocManager::install("tidyr")
if(!"readr" %in% installed.packages()) BiocManager::install("readr")
if(!"RCy3" %in% installed.packages()) BiocManager::install("RCy3")
if(!"rWikiPathways" %in% installed.packages()) BiocManager::install("rWikiPathways")
if(!"RColorBrewer" %in% installed.packages()) BiocManager::install("RColorBrewer")
#load installed librariers
library(dplyr)
library(tidyr)
library(readr)
library(RCy3)
library(rWikiPathways)
library(RColorBrewer)
# set your working environment to the location where your current source file is saved into.
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# check if BioCmanager libraries are already installed > otherwise install it
if(!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager",repos = "http://cran.us.r-project.org")
if(!"rstudioapi" %in% installed.packages()) BiocManager::install("rstudioapi")
if(!"baySeq" %in% installed.packages()) BiocManager::install("baySeq")
if(!"DESeq2" %in% installed.packages()) BiocManager::install("DESeq2")
if(!"edgeR" %in% installed.packages()) BiocManager::install("edgeR")
if(!"bioDist" %in% installed.packages()) BiocManager::install("bioDist")
if(!"biomaRt" %in% installed.packages()) BiocManager::install("biomaRt")
if(!"dplyr" %in% installed.packages()) BiocManager::install("dplyr")
if(!"magrittr" %in% installed.packages()) BiocManager::install("magrittr")
if(!"EnhancedVolcano" %in% installed.packages()) BiocManager::install("EnhancedVolcano")
#Regular R packages:
if(!"ggplot2" %in% installed.packages()){install.packages("ggplot2")}
if(!"limma" %in% installed.packages()){install.packages("limma")}
if(!"org.Hs.eg.db" %in% installed.packages()){install.packages("org.Hs.eg.db")}
if(!"R2HTML" %in% installed.packages()){install.packages("R2HTML")}
#load packages
library(rstudioapi)
library(baySeq)
library(DESeq2)
library(edgeR)
library(bioDist)
library(biomaRt)
library(dplyr)
library(magrittr)
library(EnhancedVolcano)
library(ggplot2)
library(limma)
library(org.Hs.eg.db)
library(R2HTML)
# set working environment to the location where current source file is saved into.
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
#include some functions adapted from ArrayAnalysis.org scripts
source("functions_ArrayAnalysis_v2.R")
WORK.DIR <- getwd()
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
#read the output data file from step 1.
setwd('..')
getwd()
setwd('..')
getwd()
#Obtain data from step 1
htxCount <- read.csv("1-data_preprocessing/output/htxCount.csv")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
getwd()
setwd('..')
getwd()
work_DIR <- getwd()
#Obtain data from step 1
htxCount <- read.csv("1-data_preprocessing/output/htxCount.csv")
getwd()
sampleLabels <- read.csv("1-data_preprocessing/output/sampleLabels.csv", header=FALSE)
ls
work_DIR
#Obtain data from step 1
#htxCount <- read.csv(pasteo(work_DIR,"/" ,"1-data_preprocessing/output/htxCount.csv"))
htxCount <- read.csv("./1-data_preprocessing/output/htxCount.csv")
WORK.DIR <- getwd()
#Obtain data from step 1
htxCount <- read.csv(paste0(WORK.DIR,"/" ,"1-data_preprocessing/output/htxCount.csv"))
