RCy3::setNodeLabelMapping("label", style.name="ppi")
RCy3::lockNodeDimensions(TRUE, style.name="ppi")
RCy3::setNodeShapeMapping('type', c('gene','pathway'), c("ellipse","rectangle"), style.name="ppi")
RCy3::setNodeSizeMapping('type', c('gene','pathway'), c(40,25), mapping.type = "d", style.name = "ppi")
View(deg)
data.values<-c(-0.58,0,0.58) #try like this
node.colors <- c(rev(brewer.pal(length(data.values), "RdBu")))
#setNodeColorMapping("Log2.fold.change", data.values, node.colors, default.color = "#99FF99", style.name = "ppi")
RCy3::setNodeCustomHeatMapChart(c("log2FC_CD","log2FC_UC"), slot = 2, style.name = "ppi", colors = c("#CC3300","#FFFFFF","#6699FF","#CCCCCC"))
RCy3::setVisualStyle("ppi")
RCy3::toggleGraphicsDetails()
# Saving output
png.file <- file.path(getwd(), "output/PPI_Pathway_Network_ileum.png")
exportImage(png.file,'PNG', zoom = 500)
cys.file <- file.path(getwd(), "output/PPI_Pathway_Network_ileum.cys")
saveSession(cys.file)
#to check cytoscape is connected
cytoscapePing()
networkSuid = getNetworkSuid()
clustermaker <- paste("cluster mcl createGroups=TRUE showUI=TRUE network=SUID:",networkSuid, sep="")
clustermaker
res <- commandsGET(clustermaker)
num <- as.numeric(gsub("Clusters: ", "", res[1]))
networkSuid = getNetworkSuid("PPI_Pathway_Network_ileum")
setCurrentNetwork(network=networkSuid)
clustermaker <- paste("cluster mcl createGroups=TRUE showUI=TRUE network=SUID:",networkSuid, sep="")
res <- commandsGET(clustermaker)
num <- as.numeric(gsub("Clusters: ", "", res[1]))
#to check cytoscape is connected
cytoscapePing()
#to get network name rectum
networkSuid = getNetworkSuid("PPI_Pathway_Network_rectum")
setCurrentNetwork(network=networkSuid)
#create cluster command
clustermaker <- paste("cluster mcl createGroups=TRUE showUI=TRUE network=SUID:",networkSuid, sep="")
#run the command in cytoscape
res <- commandsGET(clustermaker)
png.file <- file.path(getwd(), "output/PPI_Pathway_Network_rectum--clustered.png")
exportImage(png.file,'PNG', zoom = 500)
#total number of clusters for rectum
num_rectum <- as.numeric(gsub("Clusters: ", "", res[1]))
networkSuid = getNetworkSuid("PPI_Pathway_Network_ileum")
setCurrentNetwork(network=networkSuid)
#create cluster command
clustermaker <- paste("cluster mcl createGroups=TRUE showUI=TRUE network=SUID:",networkSuid, sep="")
#run the command in cytoscape
res <- commandsGET(clustermaker)
#total number of clusters for rectum
num_ileum <- as.numeric(gsub("Clusters: ", "", res[1]))
png.file <- file.path(getwd(), "output/PPI_Pathway_Network_ileum--clustered.png")
exportImage(png.file,'PNG', zoom = 500)
cys.file <- file.path(getwd(), "output/PPI_Pathway_Network_clustered_rectum_ileum.cys")
saveSession(cys.file)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
#you can chcek your current working directory
getwd()
#read input data
deg <- read.csv("data/DEG.overlapped_rectum", sep = "\t")
#filter out genes that does not have ENTREZ ID
deg <- deg %>% tidyr:: drop_na(ENTREZ)
#check that cytoscape is connected
cytoscapePing()
#create a PPI network using overlapped DEGs between CD and UC, the creation will be done
#for ileum and rectum locations separately
x <- readr::format_csv(as.data.frame(deg$ENTREZ), col_names=F, escape = "double", eol =",")
commandsRun(paste0('string protein query cutoff=0.7 newNetName="PPI_network_rectum" query="',x,'" limit=0'))
#get proteins (nodes) from the constructed network
proteins <- RCy3::getTableColumns(columns=c("query term", "display name"))
#get edges from the network
ppis     <- RCy3::getTableColumns(table="edge", columns=c("name"))
#split extracted edge information into source-target format
ppis     <- data.frame(do.call('rbind', strsplit(as.character(ppis$name),' (pp) ',fixed=TRUE)))
#merge obtained nodes and edges to get entrez IDs for each source genes
ppis.2   <- merge(ppis, proteins, by.x="X1", by.y="display name", all.x=T)
#change column names
colnames(ppis.2) <- c("s", "t", "source")
#merge again to add entrez IDs of target genes
ppis.3   <- merge(ppis.2, proteins, by.x="t", by.y="display name", all.x=T)
colnames(ppis.3)[4] <-"target"
#ppi3 stores interaction between all proteins so add new column represeting type of interaction
ppis.3$interaction <- "PPI"
#add col names to protein
colnames(proteins) <- c("id","label")
proteins$type <- "protein"
###############get all pathways from WIKIPATHWAYS #################
#below code should be performed first to handle the ssl certificate error uploading pathways
options(RCurlOptions = list(cainfo = paste0( tempdir() , "/cacert.pem" ), ssl.verifypeer = FALSE))
wp.hs.gmt <- rWikiPathways::downloadPathwayArchive(organism="Homo sapiens", format = "gmt")
#Now that we have the latest GMT file for human pathways,
#all wp and gene information stored in wp2gene object
wp2gene   <- rWikiPathways::readPathwayGMT(wp.hs.gmt)
#filter out  pathways that does not consist of any differentially expressed genes
wp2gene.filtered <- wp2gene [wp2gene$gene %in% deg$ENTREZ,]
#change column names
colnames(wp2gene.filtered)[3] <- c("source")
colnames(wp2gene.filtered)[5] <- c("target")
#add new column for representing interaction type
wp2gene.filtered$interaction <- "Pathway-Gene"
#store only wp information
pwy.filtered <- unique( wp2gene [wp2gene$gene %in% deg$ENTREZ,c(1,3)])
colnames(pwy.filtered) <- c("label", "id")
pwy.filtered$type <- "pathway"
colnames(pwy.filtered) <- c("label","id", "type")
#get genes
genes <- unique(deg[,c(1,2)])
genes$type <- "gene"
colnames(genes) <- c("id","label","type")
genes$id <- as.character(genes$id)
#genes and pathways are separate nodes and they need to be merged
nodes.ppi <- dplyr::bind_rows(genes,pwy.filtered)
rownames(nodes.ppi) <- NULL
edges.ppi <- unique(dplyr::bind_rows(ppis.3[,c(3,4,5)], wp2gene.filtered[,c(3,5,6)]))
rownames(edges.ppi) <- NULL
##Create PPI-pathway network###
RCy3::createNetworkFromDataFrames(nodes= nodes.ppi, edges = edges.ppi, title="PPI_Pathway_Network_rectum", collection="rectum")
RCy3::loadTableData(nodes.ppi, data.key.column = "label", table="node", table.key.column = "label")
RCy3::loadTableData(deg, data.key.column = "ENTREZ", table.key.column = "id")
###########Visual style########
RCy3::copyVisualStyle("default","ppi")
RCy3::setNodeLabelMapping("label", style.name="ppi")
RCy3::lockNodeDimensions(TRUE, style.name="ppi")
RCy3::setNodeShapeMapping('type', c('gene','pathway'), c("ellipse","rectangle"), style.name="ppi")
RCy3::setNodeSizeMapping('type', c('gene','pathway'), c(40,25), mapping.type = "d", style.name = "ppi")
data.values<-c(-0.58,0,0.58) #try like this
node.colors <- c(rev(brewer.pal(length(data.values), "RdBu")))
#setNodeColorMapping("Log2.fold.change", data.values, node.colors, default.color = "#99FF99", style.name = "ppi")
RCy3::setNodeCustomHeatMapChart(c("log2FC_CD","log2FC_UC"), slot = 2, style.name = "ppi", colors = c("#CC3300","#FFFFFF","#6699FF","#CCCCCC"))
RCy3::setVisualStyle("ppi")
RCy3::toggleGraphicsDetails()
# Saving output
png.file <- file.path(getwd(), "output/PPI_Pathway_Network_rectum.png")
exportImage(png.file,'PNG', zoom = 500)
# cys.file <- file.path(getwd(), "output/PPI_Pathway_Network_rectum.cys")
# saveSession(cys.file)
#clear environment
rm(list=ls())
#close previous cytoscape session
#RCy3::closeSession(save.before.closing = F)
#read ileum DEG data
deg <- read.csv("data/DEG.overlapped_ileum", sep = "\t")
#filter out genes that does not have ENTREZ ID
deg <- deg %>% tidyr:: drop_na(ENTREZ)
#check that cytoscape is connected
cytoscapePing()
#create a PPI network using overlapped DEGs between CD and UC the creation will be done for ileum and ileum locations separately
x <- readr::format_csv(as.data.frame(deg$ENTREZ), col_names=F, escape = "double", eol =",")
commandsRun(paste0('string protein query cutoff=0.7 newNetName="PPI_network_ileum" query="',x,'" limit=0'))
#get proteins (nodes) from the constructed network
proteins <- RCy3::getTableColumns(columns=c("query term", "display name"))
#get edges from the network
ppis     <- RCy3::getTableColumns(table="edge", columns=c("name"))
#split extracted edge information into source-target format
ppis     <- data.frame(do.call('rbind', strsplit(as.character(ppis$name),' (pp) ',fixed=TRUE)))
#merge obtained nodes and edges to get entrez IDs for each source genes
ppis.2   <- merge(ppis, proteins, by.x="X1", by.y="display name", all.x=T)
#change column names
colnames(ppis.2) <- c("s", "t", "source")
#merge again to add entrez IDs of target genes
ppis.3   <- merge(ppis.2, proteins, by.x="t", by.y="display name", all.x=T)
colnames(ppis.3)[4] <-"target"
#ppi3 stores interaction between all proteins so add new column represeting type of interaction
ppis.3$interaction <- "PPI"
#add col names to protein
colnames(proteins) <- c("id","label")
proteins$type <- "protein"
###############get all pathways from WIKIPATHWAYS #################
#below code should be performed first to handle the ssl certificate error uploading pathways
options(RCurlOptions = list(cainfo = paste0( tempdir() , "/cacert.pem" ), ssl.verifypeer = FALSE))
wp.hs.gmt <- rWikiPathways::downloadPathwayArchive(organism="Homo sapiens", format = "gmt")
#Now that we have the latest GMT file for human pathways,
#all wp and gene information stored in wp2gene object
wp2gene   <- rWikiPathways::readPathwayGMT(wp.hs.gmt)
#filter out  pathways that does not consist of any differentially expressed genes
wp2gene.filtered <- wp2gene [wp2gene$gene %in% deg$ENTREZ,]
#change column names
colnames(wp2gene.filtered)[3] <- c("source")
colnames(wp2gene.filtered)[5] <- c("target")
#add new column for representing interaction type
wp2gene.filtered$interaction <- "Pathway-Gene"
#store only wp information
pwy.filtered <- unique( wp2gene [wp2gene$gene %in% deg$ENTREZ,c(1,3)])
colnames(pwy.filtered) <- c("label", "id")
pwy.filtered$type <- "pathway"
colnames(pwy.filtered) <- c("label","id", "type")
#get genes
genes <- unique(deg[,c(1,2)])
genes$type <- "gene"
colnames(genes) <- c("id","label","type")
genes$id <- as.character(genes$id)
#genes and pathways are separate nodes and they need to be merged
nodes.ppi <- dplyr::bind_rows(genes,pwy.filtered)
rownames(nodes.ppi) <- NULL
edges.ppi <- unique(dplyr::bind_rows(ppis.3[,c(3,4,5)], wp2gene.filtered[,c(3,5,6)]))
rownames(edges.ppi) <- NULL
####Create PPI-pathway network###
RCy3::createNetworkFromDataFrames(nodes= nodes.ppi, edges = edges.ppi, title="PPI_Pathway_Network_ileum",collection="ileum")
RCy3::loadTableData(nodes.ppi, data.key.column = "label", table="node", table.key.column = "label")
RCy3::loadTableData(deg, data.key.column = "ENTREZ", table.key.column = "id")
###########Visual style########
RCy3::copyVisualStyle("default","ppi")
RCy3::setNodeLabelMapping("label", style.name="ppi")
RCy3::lockNodeDimensions(TRUE, style.name="ppi")
RCy3::setNodeShapeMapping('type', c('gene','pathway'), c("ellipse","rectangle"), style.name="ppi")
RCy3::setNodeSizeMapping('type', c('gene','pathway'), c(40,25), mapping.type = "d", style.name = "ppi")
data.values<-c(-0.58,0,0.58) #try like this
node.colors <- c(rev(brewer.pal(length(data.values), "RdBu")))
#setNodeColorMapping("Log2.fold.change", data.values, node.colors, default.color = "#99FF99", style.name = "ppi")
RCy3::setNodeCustomHeatMapChart(c("log2FC_CD","log2FC_UC"), slot = 2, style.name = "ppi", colors = c("#CC3300","#FFFFFF","#6699FF","#CCCCCC"))
RCy3::setVisualStyle("ppi")
RCy3::toggleGraphicsDetails()
# Saving output
png.file <- file.path(getwd(), "output/PPI_Pathway_Network_ileum.png")
exportImage(png.file,'PNG', zoom = 500)
cys.file <- file.path(getwd(), "output/PPI_Pathway_Network_rectum_ileum.cys")
saveSession(cys.file)
#we will continue with the smae session used for ppi-pathway networks
#to check cytoscape is connected
cytoscapePing()
#to get network name rectum
networkSuid = getNetworkSuid("PPI_Pathway_Network_rectum")
setCurrentNetwork(network=networkSuid)
#create cluster command
clustermaker <- paste("cluster mcl createGroups=TRUE showUI=TRUE network=SUID:",networkSuid, sep="")
#run the command in cytoscape
res <- commandsGET(clustermaker)
#total number of clusters for rectum
num_rectum <- as.numeric(gsub("Clusters: ", "", res[1]))
#export image
png.file <- file.path(getwd(), "output/PPI_Pathway_Network_rectum--clustered.png")
exportImage(png.file,'PNG', zoom = 500)
networkSuid = getNetworkSuid("PPI_Pathway_Network_ileum")
setCurrentNetwork(network=networkSuid)
#create cluster command
clustermaker <- paste("cluster mcl createGroups=TRUE showUI=TRUE network=SUID:",networkSuid, sep="")
#run the command in cytoscape
res <- commandsGET(clustermaker)
#total number of clusters for rectum
num_ileum <- as.numeric(gsub("Clusters: ", "", res[1]))
#export image
png.file <- file.path(getwd(), "output/PPI_Pathway_Network_ileum--clustered.png")
exportImage(png.file,'PNG', zoom = 500)
cys.file <- file.path(getwd(), "output/PPI_Pathway_Network_clustered_rectum_ileum.cys")
saveSession(cys.file)
png.file <- file.path(getwd(), "output/PPI_Pathway_Network_rectum--clustered.png")
exportImage(png.file,'PNG', zoom = 500)
browseVignettes("RCy3")
Sys.getenv("PATH")
path <- Sys.getenv("PATH")
path <- c("C:\\RBuildTools\\4.0\\mingw32\\bin", path)
path <- paste(path,collapse=";")
Sys.setenv(PATH=path)
path <- Sys.getenv("PATH")
path
devtools::install_github("xia-lab/MetaboAnalystR", build = TRUE, build_opts = c("--no-resave-data", "--no-manual"))
# Step 2: Install MetaboAnalystR with documentation
devtools::install_github("xia-lab/MetaboAnalystR", build = TRUE, build_vignettes = FALSE, build_manual = T)
# Step 2: Install MetaboAnalystR with documentation
devtools::install_github("xia-lab/MetaboAnalystR", build = TRUE, build_vignettes = FALSE, build_manual = T)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
# Step 2: Install MetaboAnalystR with documentation
devtools::install_github("xia-lab/MetaboAnalystR", build = TRUE, build_vignettes = FALSE, build_manual = T)
BiocManager::install("rlang")
library(rlang)
rlang
version.rlang
packageVersion("rlang")
library(rstudioapi)
library(RCy3)#connect cytoscape via R
library(rWikiPathways)#to get pathways from WikiPathways
library(RColorBrewer)#to manage colors with R
setwd("C:/Users/dedePC/Desktop/BBS3004_21-22/Workshop_Cytoscape/automation")
#make sure to launch cytoscape, if you get get CyREST error you need to relaunch cytoscape
cytoscapePing()
pathway1.id <- "WP5095"
pathway2.id <- "WP3624"
pathway3.id <- "WP2806"
RCy3::commandsRun(paste0('wikipathways import-as-network id=',pathway1.id ))
RCy3::commandsRun(paste0('wikipathways import-as-network id=',pathway2.id ))
RCy3::commandsRun(paste0('wikipathways import-as-network id=',pathway3.id ))
RCy3::mergeNetworks(c("Overview of proinflammatory and profibrotic mediators - Homo sapiens","Lung fibrosis - Homo sapiens"), "Merged Network-1")
RCy3::mergeNetworks(c("Merged Network","Complement system - Homo sapiens"), "Merged Network-2")
RCy3::mergeNetworks(c("Merged Network-1","Complement system - Homo sapiens"), "Merged Network-2")
#set merged network as current neetwork, you should give the name or suid of the network that you want set as current
setCurrentNetwork(network="Merged Network-2")
#read data table from the file
dataset <- read.delim("data/table_CD_Rectum_vs_nonIBD_Rectum_no_quotes.tab")
# load data in to the merged network
loadTableData(table = "node", data = dataset, data.key.column = "GeneSymbol", table.key.column = "name")
RCy3::copyVisualStyle("default","myStyle")#Create a new visual style (myStyle) by copying a specified style (default)
RCy3::setNodeLabelMapping("label", style.name="myStyle")
RCy3::lockNodeDimensions(TRUE, style.name="myStyle")#Set a boolean value to have node width and height fixed to a single size
RCy3::data.values<-c(-0.58,0,0.58) #threshold values for up and down regulated genes
#change node colors based on log2FC
data.values<-c(-0.58,0,0.58) #threshold values for up and down regulated genes
node.colors <- c(brewer.pal(length(data.values), "RdBu"))
RCy3::setNodeColorMapping("log2FoldChange", data.values, node.colors, default.color = "#D3D3D3", style.name = "myStyle")
RCy3::setNodeBorderWidthMapping('pvalue', c(1.7403E-20,0.05), c(5,1),style.name = "myStyle")
RCy3::setNodeBorderColorMapping('pvalue', c(1.7403E-20,0.05), c('#FF0000','#FF0000'),style.name = "myStyle")
#filter out nodes in merged network
createColumnFilter('myFilter', 'log2FC', -0.58, "LESS_THAN")
#filter out nodes in merged network
createColumnFilter('myFilter', 'log2FoldChange', -0.58, "LESS_THAN")
clearSelection()
#filter out nodes in merged network
#apply a column filter
createColumnFilter('myFilter', 'log2FoldChange', -0.58, "LESS_THAN")
#filter out nodes in merged network
#apply a column filter
obj <- createColumnFilter('myFilter', 'log2FoldChange', -0.58, "LESS_THAN")
obj
createNetwork(nodes = obj$nodes, edges = obj$edges, network.name = "filtered_network")
install.packages("remotes")
remotes::install_github("cytoscape/r2cytoscape")
install.packages("remotes")
createSubnetwork(nodes = obj$nodes,edges = obj$edges, network = "filtered_network")
createSubnetwork(nodes = obj$nodes,edges = obj$edges)
createSubnetwork(nodes = obj$nodes,edges = obj$edges, network = "Merged Network-2")
createNetwork(nodes = obj$nodes, edges = obj$edges, network.name = "filtered_network")
library(r2cytoscape)
createNetwork(nodes = obj$nodes, edges = obj$edges, network.name = "filtered_network")
createNetwork(nodes = obj, network.name = "filtered_network")
createSubnetwork()
#you may clear selection
clearSelection()
# set your working environment to your source file location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
rstudioapi::getActiveDocumentContext()$path
dirname(rstudioapi::getActiveDocumentContext()$path)
rstudioapi::getActiveDocumentContext()$path
rstudioapi::getActiveDocumentContext()
knitr::opts_chunk$set(echo = TRUE)
library(rstudioapi)
getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
sessionInfo()
packageVersion("rstudioapi")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#close all opened session before starting
closeSession(FALSE)# clears all session data without saving
help(package=RCy3)
#make sure to launch cytoscape, if you get CyREST error you need to relaunch cytoscape
cytoscapePing()
commandsHelp()
pathway1.id <- "WP5095"
pathway2.id <- "WP3624"
pathway3.id <- "WP2806"
RCy3::commandsRun(paste0('wikipathways import-as-network id=',pathway1.id ))
RCy3::commandsRun(paste0('wikipathways import-as-network id=',pathway2.id ))
RCy3::commandsRun(paste0('wikipathways import-as-network id=',pathway3.id ))
###### STEP-2 Merge imported pathways #######
#we will merge imported networks
RCy3::mergeNetworks(c("Overview of proinflammatory and profibrotic mediators - Homo sapiens","Lung fibrosis - Homo sapiens"), "Merged Network-1")
RCy3::mergeNetworks(c("Merged Network-1","Complement system - Homo sapiens"), "Merged Network-2")
#set the merged network as the current network, you should give the name or suid of the network
#that you want set as current
setCurrentNetwork(network="Merged Network-2")
####### STEP-3 Load data file #########
#read data table from the file
dataset <- read.delim("data/table_CD_Rectum_vs_nonIBD_Rectum_no_quotes.tab")
# load data in to the merged network
loadTableData(table = "node", data = dataset, data.key.column = "GeneSymbol", table.key.column = "name")
View(dataset)
View(dataset)
####### STEP-3 Load data file #########
#read data table from the file
dataset <- read.delim("data/table_CD_Rectum_vs_nonIBD_Rectum.tab")
# load data in to the merged network
loadTableData(table = "node", data = dataset, data.key.column = "GeneSymbol", table.key.column = "name")
# load data in to the merged network
loadTableData(table = "node", data = dataset, data.key.column = "GeneSymbol", table.key.column = "name")
View(dataset)
####### STEP-3 Load data file #########
#read data table from the file
dataset <- read.delim("data/table_CD_Rectum_vs_nonIBD_Rectum_no_quotes.tab")
# load data in to the merged network
loadTableData(table = "node", data = dataset, data.key.column = "GeneSymbol", table.key.column = "name")
# load data in to the merged network
loadTableData(table = "node", data = dataset, data.key.column = "GeneSymbol", table.key.column = "name")
# load data in to the merged network
loadTableData(table = "node", data = dataset, data.key.column = "GeneSymbol", table.key.column = "name", network = "Merged Network-2")
dataset <- read.csv ("data/table_CD_Rectum_vs_nonIBD_Rectum.tab", sep = "\t" )
View(dataset)
dataset <- read.csv ("data/table_CD_Rectum_vs_nonIBD_Rectum.tab", sep = "\t" )
View(dataset)
# load data in to the merged network
loadTableData(table = "node", data = dataset, data.key.column = "GeneSymbol", table.key.column = "name", network = "Merged Network-2")
dataset <- read.csv ("data/table_CD_Rectum_vs_nonIBD_Rectum.tab", sep = "\t" ,row.names = FALSE)
####### STEP-3 Load data file #########
#read data table from the file
dataset <- read.delim("data/table_CD_Rectum_vs_nonIBD_Rectum_no_quotes.tab")
View(dataset)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(scales)
library(coin)
library(nlme)
library(compositions)
library(FSA)
library(cowplot)
library(phyloseq)
library(microbiome)
library(DESeq2)
library(ggvenn)
setwd("C:/Users/dedePC/Desktop/Workshop_Microbial_Community/source_codes/day3_session2")
source("ancom_v2..R")
source("ancom_v2.1.R")
load("phyloseq.Rdata")
physeq
View(physeq)
# check if chloroplasts are present in the dataset
tax_table(subset_taxa(physeq, Order == "Chloroplast")) # 2 chloroplast ASVs present
# remove chloroplasts
physeq<-physeq %>% subset_taxa(Order != "Chloroplast")
# check if mitochondria are present in the dataset
tax_table(subset_taxa(physeq, Family == "Mitochondria")) # 5 mitochondria ASVs present
# remove mitochondria
physeq<-physeq %>% subset_taxa(Family != "Mitochondria")
# show phyloseq object again - we can see that we removed 7 ASVs in total
physeq
phyroot <- physeq %>% subset_samples(Tissue == "Soil")
phyroot
# filter
phyroot_filtered = filter_taxa(phyroot, function(x) sum(x > 15) > (0.25*length(x)), TRUE)
# check how many taxa were removed
ntaxa(phyroot) # before filtering
ntaxa(phyroot_filtered) # after filtering
# we are choosing the minimum read count for rarefaction
raremin<-min(phyloseq::sample_sums(phyroot_filtered))
# rarefy the data to raremin
phyroot_filtered_rar<-rarefy_even_depth(physeq = phyroot_filtered, sample.size = raremin, trimOTUs = T, rngseed = 65987, replace = F)
# check the loss of taxa due to rarefaction
ntaxa(phyroot_filtered)
ntaxa(phyroot_filtered_rar)
# get most abundant ASV across samples
asv<-phyloseq::taxa_sums(phyroot_filtered_rar) %>% sort(decreasing = T) %>% head(n =1) %>% names
asv # we chose ASV4
# transform counts into relative abundances so it is of easier understanding
phyroot_filtered_rar <- transform_sample_counts(phyroot_filtered_rar, function(x) x / sum(x) )
phyloseq::sample_sums(phyroot_filtered_rar) # now sample sums are all 1
#  we save the relative abundance of ASV4 in each sample into a dataframe
dfASV4 <- data.frame(
Abundance = as.vector(otu_table(phyroot_filtered_rar)[asv,]),
samples = as.data.frame(otu_table(phyroot_filtered_rar))[asv,] %>% names
)
# now add the metadata
# First double check that the samples are in the same order so you can merge the df
all(dfASV4$samples == rownames(meta(phyroot_filtered_rar)))
# then bind the two dataframes together to combine ASV4 abundances with metadata
dfASV4<-cbind.data.frame(dfASV4, meta(phyroot_filtered_rar))
# we need to transform the variables to factors
dfASV4<-dfASV4 %>% mutate_if(is.character,as.factor)
# perform wilcoxon test
w<-coin::wilcox_test(Abundance ~ Country, data=dfASV4, conf.int = TRUE)
# we can extract the p-value, which will tell us if the shift in abundance is significant
coin::pvalue(w)
# we can extract an approximation of the median differences in abundance between the 2 groups using the confint() function
confint(w)[[2]]
# ... and the corresponding confidence intervals
as.data.frame(confint(w)[[1]])
ASV4_box
w
# let's explore the distribution of the taxa abundances across samples in a box plot.
ASV4_box<-ggplot(dfASV4, aes(Country, Abundance)) +
geom_boxplot() +
geom_jitter(width = 0.2) +
facet_wrap(~Tissue)
ASV4_box
knitr::opts_chunk$set(echo = TRUE)
# create a df with all taxa and all variables
asv<-as.data.frame(t(otu_table(phyroot_filtered_rar))) # extract asv abundances
all(rownames(asv) == rownames(meta(phyroot_filtered_rar))) # check that order is identical
asv<-cbind.data.frame(asv, meta(phyroot_filtered_rar)) # combine asv and metadata
asv<-asv %>% mutate_if(is.character,as.factor) # make sure variables are factors
View(asv)
# save all taxa names
tax<-taxa_names(phyroot_filtered_rar)
# empty dataframe, setting up all required columns
df_w<-data.frame(pvalue= vector(length = length(tax)),
padjust = vector(length = length(tax)),
CI1 = vector(length = length(tax)),
CI2 = vector(length = length(tax)),
estimate = vector(length = length(tax)))
rownames(df_w)<-tax # set rownames to taxa
wget(c("https://cran.r-project.org/web/packages/HelpersMG/HelpersMG.pdf",
"https://cran.r-project.org/web/packages/embryogrowth/embryogrowth.pdf"))
library(HelpersMG)
install.packages("HelpersMG")
library(HelpersMG)
wget(c("https://cran.r-project.org/web/packages/HelpersMG/HelpersMG.pdf",
"https://cran.r-project.org/web/packages/embryogrowth/embryogrowth.pdf"))
getwd()
wget("https://ibdmdb.org/tunnel/public/HMP2/HTX/1730/products/host_tx_counts.tsv.gz")
wget("https://ibdmdb.org/tunnel/public/HMP2/HTX/1730/products")
wget -O host_tx_counts.tsv.gz --referer https://ibdmdb.org/tunnel/public/HMP2/HTX/1730/products
'https://ibdmdb.org/tunnel/public/HMP2/HTX/1730/products/host_tx_counts.tsv.gz'
wget -O host_tx_counts.tsv.gz --referer https://ibdmdb.org/tunnel/public/HMP2/HTX/1730/products 'https://ibdmdb.org/tunnel/public/HMP2/HTX/1730/products/host_tx_counts.tsv.gz'
library(BiocManager)
library(rstudioapi)
library(MetaboAnalystR)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
work_DIR <- getwd()
#initialize data object
mSet<-InitDataObjects("pktable", "stat", FALSE)
if(!"MetaboAnalystR" %in% installed.packages()) BiocManager::install("MetaboAnalystR")
